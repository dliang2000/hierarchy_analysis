/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 05:09:57 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Minutes;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodType_ESTest extends PeriodType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      int[] intArray0 = new int[7];
      intArray0[3] = (-740);
      PeriodType periodType0 = new PeriodType("", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withDaysRemoved();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("WeeksNoWeeks", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals("SecondsNoSeconds", periodType1.getName());
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      PeriodType periodType1 = periodType0.withSecondsRemoved();
      assertEquals(4, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("Minutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals(0, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      int int0 = periodType1.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = new Period((-2642L), (Chronology) null);
      int[] intArray0 = new int[4];
      periodType0.setIndexedField(period0, 0, intArray0, 0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals("YearWeekDay", periodType0.getName());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      int int0 = periodType0.getIndexedField((ReadablePeriod) null, 0);
      assertEquals(0, int0);
      assertEquals("Seconds", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      
      periodType0.getFieldType(0);
      assertEquals("Seconds", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[7];
      PeriodType periodType0 = PeriodType.yearDayTime();
      boolean boolean0 = periodType0.addIndexedField((ReadablePeriod) null, 0, intArray0, 22);
      assertEquals(6, periodType0.size());
      assertArrayEquals(new int[] {22, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      int[] intArray0 = new int[4];
      PeriodType periodType0 = new PeriodType("The chronology of the time does not match", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withYearsRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[6];
      int[] intArray0 = new int[6];
      PeriodType periodType0 = new PeriodType("millis", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withWeeksRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      int[] intArray0 = new int[7];
      PeriodType periodType0 = new PeriodType("r>&4#!", durationFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        periodType0.withMinutesRemoved();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[8];
      Period period0 = Period.seconds(0);
      Minutes minutes0 = period0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      PeriodType periodType0 = new PeriodType("org.joda.time.PeriodType", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(days0, 6, (int[]) null, 53);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      Period period0 = Period.hours(0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField(period0, 1009, intArray0, (-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1009
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = Period.millis(1280);
      // Undeclared exception!
      try { 
        periodType0.getIndexedField(period0, 1280);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1280
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      Period period0 = Period.minutes(47);
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(period0, 0, (int[]) null, 47);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      periodType0.hashCode();
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      periodType1.equals(periodType0);
      assertEquals("MinutesNoMinutes", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      boolean boolean0 = periodType0.equals(periodType0);
      assertTrue(boolean0);
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.YEARS_TYPE;
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals(0, int0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PeriodType.millis();
      PeriodType periodType0 = PeriodType.millis();
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType.seconds();
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PeriodType.minutes();
      PeriodType periodType0 = PeriodType.minutes();
      assertEquals("Minutes", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.months();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.seconds();
      durationFieldTypeArray0[2] = durationFieldType2;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.hours();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals(0, periodType1.size());
      assertEquals("HoursNoHours", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.weeks();
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PeriodType periodType0 = PeriodType.weeks();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = periodType0.indexOf(durationFieldType0);
      assertEquals((-1), int0);
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PeriodType.months();
      PeriodType periodType0 = PeriodType.months();
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = PeriodType.years();
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PeriodType.time();
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals("Time", periodType0.getName());
      assertEquals(4, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PeriodType.dayTime();
      PeriodType periodType0 = PeriodType.dayTime();
      assertEquals("DayTime", periodType0.getName());
      assertNotNull(periodType0);
      assertEquals(5, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.yearDay();
      assertEquals("YearDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PeriodType.yearDayTime();
      PeriodType periodType0 = PeriodType.yearDayTime();
      assertEquals("YearDayTime", periodType0.getName());
      assertEquals(6, periodType0.size());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PeriodType.yearWeekDay();
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PeriodType.yearWeekDayTime();
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals(7, periodType0.size());
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertEquals(3, periodType0.size());
      assertEquals("YearMonthDay", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.SECONDS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = PeriodType.yearMonthDay();
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertNotNull(periodType0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType1 = PeriodType.yearMonthDayTime();
      assertFalse(periodType1.equals((Object)periodType0));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PeriodType.standard();
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      int int0 = periodType0.size();
      assertEquals(3, int0);
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      String string0 = periodType0.getName();
      assertEquals("Millis", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      String string0 = "Y*-&*O^`=^E\\u=q";
      boolean boolean0 = periodType0.equals(string0);
      assertFalse(boolean0);
      assertEquals("Millis", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((-2642L), (Chronology) null);
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        periodType0.addIndexedField(period0, 0, intArray0, 2232);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Period period0 = Period.minutes(47);
      Period period1 = period0.minusDays(47);
      assertFalse(period1.equals((Object)period0));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PeriodType periodType0 = PeriodType.seconds();
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        periodType0.setIndexedField((ReadablePeriod) null, 0, intArray0, 662);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Field is not supported
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0L, periodType0, islamicChronology0);
      Period period0 = mutablePeriod0.toPeriod();
      Minutes minutes0 = period0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      int[] intArray0 = new int[1];
      boolean boolean0 = periodType0.addIndexedField(seconds0, (-120), intArray0, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PeriodType periodType0 = PeriodType.years();
      // Undeclared exception!
      try { 
        periodType0.getIndexedField((ReadablePeriod) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      boolean boolean0 = periodType0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      boolean boolean0 = periodType0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
      assertEquals("DayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[3];
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.months();
      durationFieldTypeArray0[1] = durationFieldType1;
      DurationFieldType durationFieldType2 = DurationFieldType.seconds();
      durationFieldTypeArray0[2] = durationFieldType2;
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals(3, periodType0.size());
      
      PeriodType periodType1 = PeriodType.days();
      assertEquals("Days", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldType0;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldType0;
      durationFieldTypeArray0[4] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[5] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[6] = durationFieldTypeArray0[2];
      DurationFieldType durationFieldType1 = DurationFieldType.millis();
      durationFieldTypeArray0[7] = durationFieldType1;
      durationFieldTypeArray0[8] = durationFieldTypeArray0[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours, hours, hours, hours, hours, hours, hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      DurationFieldType durationFieldType1 = DurationFieldType.MINUTES_TYPE;
      durationFieldTypeArray0[1] = durationFieldType1;
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[4] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[5] = durationFieldType0;
      durationFieldTypeArray0[6] = durationFieldType0;
      durationFieldTypeArray0[7] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[8] = durationFieldType1;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours, hours, hours, hours, hours, hours, minutes]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[9];
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[0];
      DurationFieldType durationFieldType1 = DurationFieldType.WEEKS_TYPE;
      durationFieldTypeArray0[4] = durationFieldType1;
      durationFieldTypeArray0[5] = durationFieldType1;
      durationFieldTypeArray0[6] = durationFieldTypeArray0[2];
      durationFieldTypeArray0[7] = durationFieldTypeArray0[3];
      durationFieldTypeArray0[8] = durationFieldType0;
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [hours, hours, hours, weeks, hours, hours, hours]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[4];
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      durationFieldTypeArray0[0] = durationFieldType0;
      durationFieldTypeArray0[1] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[2] = durationFieldTypeArray0[0];
      durationFieldTypeArray0[3] = durationFieldTypeArray0[1];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PeriodType does not support fields: [days, days, days]
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[7];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not contain null
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[0];
      // Undeclared exception!
      try { 
        PeriodType.forFields(durationFieldTypeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        PeriodType.forFields((DurationFieldType[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Types array must not be null or empty
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      durationFieldTypeArray0[0] = durationFieldType0;
      PeriodType.forFields(durationFieldTypeArray0);
      PeriodType periodType0 = PeriodType.forFields(durationFieldTypeArray0);
      assertEquals("Minutes", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      assertEquals("Months", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertEquals("Months", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DurationFieldType[] durationFieldTypeArray0 = new DurationFieldType[1];
      PeriodType periodType0 = new PeriodType("0grEI.", durationFieldTypeArray0, (int[]) null);
      // Undeclared exception!
      try { 
        periodType0.withSecondsRemoved();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      // Undeclared exception!
      try { 
        periodType0.getFieldType(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withWeeksRemoved();
      assertEquals("YearDay", periodType0.getName());
      assertEquals(2, periodType1.size());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      
      String string0 = periodType0.toString();
      assertEquals("PeriodType[Millis]", string0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      assertEquals("Months", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      assertEquals("MonthsNoMonths", periodType1.getName());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      assertEquals("Months", periodType1.getName());
  }
}
