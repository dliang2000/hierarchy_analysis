/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:00:52 GMT 2020
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.DelegatedDateTimeField;
import org.joda.time.field.LenientDateTimeField;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.field.SkipDateTimeField;
import org.joda.time.field.SkipUndoDateTimeField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OffsetDateTimeField_ESTest extends OffsetDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfSecond();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      long long0 = offsetDateTimeField0.set((long) 1, 1);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(0L, long0);
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1963);
      long long0 = offsetDateTimeField0.set((-1L), 1963);
      assertEquals(1962, offsetDateTimeField0.getMinimumValue());
      assertEquals((-1L), long0);
      assertEquals(1964, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 5774);
      offsetDateTimeField0.roundHalfFloor(0L);
      assertEquals(5874, offsetDateTimeField0.getMaximumValue());
      assertEquals(5775, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      long long0 = offsetDateTimeField0.roundHalfEven(1);
      assertEquals((-2922684), offsetDateTimeField0.getMinimumValue());
      assertEquals(2922797, offsetDateTimeField0.getMaximumValue());
      assertEquals((-378673200000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.roundHalfCeiling(1);
      assertEquals(2922797, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2922684), offsetDateTimeField0.getMinimumValue());
      assertEquals((-378691200000L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.roundCeiling(2642L);
      assertEquals(60000L, long0);
      assertEquals(1440, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1580);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField((Chronology) null, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0, 1580);
      long long0 = offsetDateTimeField0.roundCeiling((-259201580L));
      assertEquals((-259201580L), long0);
      assertEquals(1680, offsetDateTimeField0.getMaximumValue());
      assertEquals(1580, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      LenientDateTimeField lenientDateTimeField0 = new LenientDateTimeField(dateTimeField0, buddhistChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(lenientDateTimeField0, 1);
      offsetDateTimeField0.remainder(0L);
      assertEquals(367, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1751);
      offsetDateTimeField0.isLeap(0L);
      assertEquals((-292266760), offsetDateTimeField0.getMinimumValue());
      assertEquals(292281287, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1504));
      int int0 = offsetDateTimeField0.getOffset();
      assertEquals((-1503), offsetDateTimeField0.getMinimumValue());
      assertEquals((-1504), int0);
      assertEquals((-1480), offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-1));
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals(11, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, Integer.MIN_VALUE);
      int int0 = offsetDateTimeField0.getMinimumValue();
      assertEquals((-2147483647), offsetDateTimeField0.getMaximumValue());
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 0);
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(0, int0);
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 32);
      offsetDateTimeField0.getLeapDurationField();
      assertEquals(33, offsetDateTimeField0.getMinimumValue());
      assertEquals(292271054, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      offsetDateTimeField0.getLeapAmount(1);
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyear();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1751);
      offsetDateTimeField0.getLeapAmount(544);
      assertEquals(292281287, offsetDateTimeField0.getMaximumValue());
      assertEquals((-292266760), offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1);
      int int0 = offsetDateTimeField0.get(31536000000L);
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(0, int0);
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-1584));
      int int0 = offsetDateTimeField0.get(21600000L);
      assertEquals((-1573), offsetDateTimeField0.getMaximumValue());
      assertEquals((-1583), int0);
      assertEquals((-1584), offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.addWrapField(0L, 0);
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(0L, long0);
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      long long0 = offsetDateTimeField0.addWrapField((long) 1, 1);
      assertEquals(2922797, offsetDateTimeField0.getMaximumValue());
      assertEquals(3155760000001L, long0);
      assertEquals((-2922684), offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.monthOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      offsetDateTimeField0.roundHalfCeiling(1);
      offsetDateTimeField0.getMaximumValue();
      offsetDateTimeField0.getOffset();
      offsetDateTimeField0.roundHalfFloor(0L);
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(13, int0);
      
      long long0 = offsetDateTimeField0.remainder((-1551L));
      assertEquals(2660398449L, long0);
      
      offsetDateTimeField0.getOffset();
      int int1 = offsetDateTimeField0.getMinimumValue();
      assertEquals(2, int1);
      
      int int2 = offsetDateTimeField0.getOffset();
      assertEquals(1, int2);
      
      long long1 = offsetDateTimeField0.addWrapField(2182L, (-11));
      assertEquals((-28857597818L), long1);
      
      long long2 = offsetDateTimeField0.roundFloor(2678398449L);
      assertEquals(18000000L, long2);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 22);
      offsetDateTimeField0.add(0L, 0L);
      assertEquals(23, offsetDateTimeField0.getMinimumValue());
      assertEquals(122, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-801));
      long long0 = offsetDateTimeField0.add((long) (-701), (long) (-801));
      assertEquals((-800), offsetDateTimeField0.getMinimumValue());
      assertEquals((-701), offsetDateTimeField0.getMaximumValue());
      assertEquals((-25276406400701L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-1));
      long long0 = offsetDateTimeField0.add(0L, 1);
      assertEquals(23, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(3600000L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(gregorianChronology0, dateTimeField0, Integer.MIN_VALUE);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, dateTimeFieldType0, 58);
      long long0 = offsetDateTimeField0.add((long) Integer.MIN_VALUE, 0);
      assertEquals(58, offsetDateTimeField0.getMinimumValue());
      assertEquals(59, offsetDateTimeField0.getMaximumValue());
      assertEquals((-2147483648L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.set((long) 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-05:17:32 (BuddhistChronology[America/Toronto])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundHalfFloor(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 292272992, 929);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundHalfEven(929);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000-05:17:32 (BuddhistChronology[America/Toronto])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundHalfCeiling(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-3318));
      // Undeclared exception!
      try { 
        offsetDateTimeField0.roundFloor(1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 2823);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.remainder(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.year();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 719527);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.getLeapAmount((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000-05:17:32 (BuddhistChronology[America/Toronto])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.millisOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-1022), (-59), (-59));
      // Undeclared exception!
      try { 
        offsetDateTimeField0.get((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0, (-1658), 0, 0);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapField((-1L), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MIN > MAX
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.minuteOfDay();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((long) 1, (-15742283918680L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.era();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((long) Integer.MIN_VALUE, (long) 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.yearOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DelegatedDateTimeField delegatedDateTimeField0 = new DelegatedDateTimeField(dateTimeField0, dateTimeFieldType0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(delegatedDateTimeField0, dateTimeFieldType0, 1, 1252, 1);
      // Undeclared exception!
      try { 
        offsetDateTimeField0.add((long) 3150, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481678 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.clockhourOfHalfday();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, (-2211), 1, 3039);
      int int0 = offsetDateTimeField0.getMaximumValue();
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals((-2199), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekOfWeekyear();
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(gJChronology0);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(ethiopicChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.set(1150L, 8);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(259201150L, long0);
      assertEquals(8, offsetDateTimeField0.getMaximumValue());
      assertEquals(2, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1);
      int int0 = offsetDateTimeField0.get((-1L));
      assertEquals(1, int0);
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField((Chronology) null);
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The offset cannot be zero
         //
         verifyException("org.joda.time.field.OffsetDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OffsetDateTimeField offsetDateTimeField0 = null;
      try {
        offsetDateTimeField0 = new OffsetDateTimeField((DateTimeField) null, (-17));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The type must not be null
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.hourOfHalfday();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 289);
      offsetDateTimeField0.roundHalfEven(1);
      assertEquals(289, offsetDateTimeField0.getOffset());
      assertEquals(300, offsetDateTimeField0.getMaximumValue());
      assertEquals(289, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      long long0 = offsetDateTimeField0.roundFloor(1);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals((-378673200000L), long0);
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.add(1440L, (long) 1);
      assertEquals(32054401440L, long0);
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      SkipUndoDateTimeField skipUndoDateTimeField0 = new SkipUndoDateTimeField(buddhistChronology0, dateTimeField0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfDay();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipUndoDateTimeField0, dateTimeFieldType0, 1);
      long long0 = offsetDateTimeField0.add(0L, 0);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(0L, long0);
      assertEquals(101, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1);
      long long0 = offsetDateTimeField0.roundCeiling((-1L));
      assertEquals(0L, long0);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1);
      offsetDateTimeField0.getLeapDurationField();
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeField dateTimeField0 = buddhistChronology0.centuryOfEra();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 1, 1, 1);
      long long0 = offsetDateTimeField0.remainder((-3223L));
      assertEquals(1, offsetDateTimeField0.getMinimumValue());
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(1, offsetDateTimeField0.getMaximumValue());
      assertEquals((-3223L), long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      DateTimeField dateTimeField0 = buddhistChronology0.halfdayOfDay();
      SkipDateTimeField skipDateTimeField0 = new SkipDateTimeField(ethiopicChronology0, dateTimeField0, 1);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(skipDateTimeField0, 1);
      offsetDateTimeField0.isLeap(0L);
      assertEquals(1, offsetDateTimeField0.getOffset());
      assertEquals(2, offsetDateTimeField0.getMaximumValue());
      assertEquals(0, offsetDateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.dayOfYear();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, (-1983));
      // Undeclared exception!
      try { 
        offsetDateTimeField0.addWrapField((long) 1, Integer.MIN_VALUE);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1374 for dayOfYear must be in the range [-1982,-1617]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyear();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = dateTimeFieldType0.getField(islamicChronology0);
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, dateTimeFieldType0, 32);
      offsetDateTimeField0.getLeapAmount((-2445L));
      assertEquals(32, offsetDateTimeField0.getOffset());
      assertEquals(33, offsetDateTimeField0.getMinimumValue());
      assertEquals(292271054, offsetDateTimeField0.getMaximumValue());
  }
}
