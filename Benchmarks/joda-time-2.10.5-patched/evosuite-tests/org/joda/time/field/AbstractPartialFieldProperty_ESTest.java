/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 04:25:48 GMT 2020
 */

package org.joda.time.field;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.Instant;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractPartialFieldProperty_ESTest extends AbstractPartialFieldProperty_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth.Property yearMonth_Property1 = yearMonth0.year();
      boolean boolean0 = yearMonth_Property0.equals(yearMonth_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      DurationField durationField0 = yearMonth_Property0.getRangeDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      int int0 = yearMonth_Property0.getMinimumValueOverall();
      assertEquals((-292275054), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(388, 7);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(516, 516, (-1407), 516, (-1407));
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      DateTimeField dateTimeField0 = monthDay_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1838, 1064, 1);
      MonthDay monthDay0 = MonthDay.fromCalendarFields(mockGregorianCalendar0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      int int0 = monthDay_Property0.get();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      DateTimeFieldType dateTimeFieldType0 = monthDay_Property0.getFieldType();
      assertEquals("monthOfYear", dateTimeFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(2038L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      YearMonth.Property yearMonth_Property0 = yearMonth0.property(dateTimeFieldType0);
      String string0 = yearMonth_Property0.getName();
      assertEquals("monthOfYear", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      Locale locale0 = Locale.ROOT;
      String string0 = monthDay_Property0.getAsShortText(locale0);
      assertEquals("Feb", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      MonthDay monthDay1 = new MonthDay(1, 1);
      MonthDay.Property monthDay_Property0 = monthDay1.dayOfMonth();
      MonthDay.Property monthDay_Property1 = monthDay0.dayOfMonth();
      boolean boolean0 = monthDay_Property0.equals(monthDay_Property1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay.Property monthDay_Property1 = monthDay0.dayOfMonth();
      boolean boolean0 = monthDay_Property0.equals(monthDay_Property1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology0);
      TimeZone timeZone0 = TimeZone.getDefault();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      boolean boolean0 = yearMonth_Property0.equals(timeZone0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      boolean boolean0 = monthDay_Property0.equals(monthDay_Property0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      MonthDay monthDay1 = monthDay0.minusDays(57);
      MonthDay.Property monthDay_Property0 = monthDay0.dayOfMonth();
      MonthDay.Property monthDay_Property1 = monthDay1.dayOfMonth();
      boolean boolean0 = monthDay_Property1.equals(monthDay_Property0);
      assertFalse(monthDay_Property0.equals((Object)monthDay_Property1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth0.minusMonths(1);
      int int0 = yearMonth_Property0.compareTo((ReadablePartial) yearMonth1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Chronology chronology0 = buddhistChronology0.withUTC();
      YearMonth yearMonth0 = new YearMonth(0L, chronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      YearMonth yearMonth1 = yearMonth_Property0.addWrapFieldToCopy((-811));
      int int0 = yearMonth_Property0.compareTo((ReadablePartial) yearMonth1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      // Undeclared exception!
      try { 
        yearMonth_Property0.compareTo((ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractPartialFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.compareTo((ReadablePartial) yearMonth0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) strictChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      Instant instant0 = new Instant(373L);
      int int0 = yearMonth_Property0.compareTo((ReadableInstant) instant0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) null);
      int int0 = monthDay_Property0.compareTo((ReadableInstant) mutableDateTime0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(388, 7);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      // Undeclared exception!
      try { 
        yearMonth_Property0.compareTo((ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant must not be null
         //
         verifyException("org.joda.time.field.AbstractPartialFieldProperty", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.compareTo((ReadableInstant) dateTime0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.getAsText();
      assertEquals("February", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.getAsString();
      assertEquals("2", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.KOREAN;
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMaximumTextLength(locale0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMaximumValue();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) strictChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      int int0 = yearMonth_Property0.getMinimumValue();
      assertEquals((-292269054), int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.getAsShortText();
      assertEquals("12", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Chronology) null);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      monthDay_Property0.hashCode();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      Locale locale0 = Locale.TAIWAN;
      int int0 = monthDay_Property0.getMaximumShortTextLength(locale0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) buddhistChronology0);
      Locale locale0 = Locale.KOREAN;
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.getAsText(locale0);
      assertEquals("12", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      MonthDay.Property monthDay_Property0 = monthDay0.monthOfYear();
      int int0 = monthDay_Property0.getMinimumValueOverall();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(97, 2);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      DurationField durationField0 = yearMonth_Property0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) strictChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      int int0 = yearMonth_Property0.getMaximumValueOverall();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) strictChronology0);
      YearMonth.Property yearMonth_Property0 = yearMonth0.year();
      DurationField durationField0 = yearMonth_Property0.getDurationField();
      assertNotNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth.Property yearMonth_Property0 = yearMonth0.monthOfYear();
      String string0 = yearMonth_Property0.toString();
      assertEquals("Property[monthOfYear]", string0);
  }
}
