/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 05:36:45 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.joda.time.Chronology;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Instant;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePeriod;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MutablePeriod_ESTest extends MutablePeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 1678, 1678, 1678);
      mutablePeriod0.setPeriod((-12L), 0L);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setPeriod((ReadableInstant) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(865, 1, 292272984, (-1));
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      mutablePeriod0.set(durationFieldType0, (-1676));
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1997, 1997, 10209375, 1997);
      Duration duration0 = Duration.standardSeconds(10209375);
      mutablePeriod0.add((ReadableDuration) duration0);
      assertEquals(10209375000L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(490, 490, 9, 9, (-2567), 9, 9, 490);
      int int0 = mutablePeriod0.getYears();
      assertEquals(490, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3656, 3656, (-141), (-141), (-141), 3656, 0, 0, (PeriodType) null);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals((-141), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2436), 3526, 3526, (-2436));
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(3526, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1678, 1678, 1678, 0, 0, 0, 0);
      mutablePeriod0.add(1194, 1678, 1194, (-2490), (-2123), (-2123), (-4212), (-2138));
      int int0 = mutablePeriod0.getSeconds();
      assertEquals((-4212), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2648), 4224, 0, 0, (-1901), 0);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(4224, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3657, 3657, (-141), (-141), (-141), 3657, 0, 0, (PeriodType) null);
      mutablePeriod0.setMonths((-141));
      int int0 = mutablePeriod0.getMonths();
      assertEquals((-141), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3656, 3656, (-141), (-141), (-141), 3656, 0, 0, (PeriodType) null);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(3656, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4245, 4245, (-2644), 4245, 0, 0, (-1915), 0);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1997, 1997, 10209375, (-20));
      int int0 = mutablePeriod0.getMillis();
      assertEquals((-20), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2648), 4224, 0, 0, (-1901), 0);
      int int0 = mutablePeriod0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3656, 3656, (-141), (-141), (-141), 3656, 0, 0, (PeriodType) null);
      mutablePeriod0.add(0, (-141), (-141), 0, 503, 0, 0, 3656);
      int int0 = mutablePeriod0.getHours();
      assertEquals(362, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(865, 1, 292272984, (-1));
      int int0 = mutablePeriod0.getDays();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4245, 4245, (-2644), 4245, 0, 0, (-1915), 0);
      mutablePeriod0.setPeriod(2705, 4245, 0, (-2644), 0, (-2644), 1611, (-1568));
      int int0 = mutablePeriod0.getDays();
      assertEquals((-2644), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, 4224, 4224, 0, 0, 0, 0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setValue(4224, 4224);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4224
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("Clone error", (PeriodFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.MutablePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      // Undeclared exception!
      try { 
        MutablePeriod.parse("A?7<mM12I{[$.xo", periodFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"A?7<mM12I{[$.xo\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3670, 3670, (-141), (-141), (-141), 3670, 0, 0, (PeriodType) null);
      PeriodType.HOUR_INDEX = 1977;
      // Undeclared exception!
      try { 
        mutablePeriod0.getHours();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1977
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2644), 4224, (-2644), (-2644), (-1915), (-2644));
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        mutablePeriod0.add(durationFieldType0, 1910);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'eras'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 65533, 65533, 65533);
      PeriodType.MONTH_INDEX = 65533;
      // Undeclared exception!
      try { 
        mutablePeriod0.add(1194, 1678, 1194, (-2474), (-2123), (-2123), (-4212), (-2138));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 65533
         //
         verifyException("org.joda.time.PeriodType", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0, periodType0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Instant instant0 = new Instant();
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, instant0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(mockThaiBuddhistDate0, (PeriodType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("tBAV_`(.", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"tBAV_`(.\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Object object0 = new Object();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDay();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(866, 352831696, 866, 866, 866, 352831696, 352831696, 0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3656, 3656, (-141), (-141), (-141), 3656, 0, 0, (PeriodType) null);
      int int0 = mutablePeriod0.getHours();
      assertEquals((-141), int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      Object object0 = mutablePeriod0.clone();
      assertTrue(object0.equals((Object)mutablePeriod0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, (PeriodParser) null);
      // Undeclared exception!
      try { 
        MutablePeriod.parse((String) null, periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      int int0 = mutablePeriod0.getYears();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1997, 1997, 10209375, 0);
      mutablePeriod0.setPeriod((long) 10209375, (-1375L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0, 9, 0, 994, 4978125);
      int int0 = mutablePeriod0.getMillis();
      assertEquals(4978125, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1678, 1678, 1678, 0, 0, 0, 0);
      int int0 = mutablePeriod0.getWeeks();
      assertEquals(1678, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1997, 1997, 10209375, 1997);
      mutablePeriod0.setPeriod(1703L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, (-634), 0, 0, (-634), 0);
      int int0 = mutablePeriod0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 935, 0, 935, 0, 0, 935, 0);
      int int0 = mutablePeriod0.getDays();
      assertEquals(935, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 4145, 0, 0, (-2426), 0, 10125000);
      int int0 = mutablePeriod0.getSeconds();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      int int0 = mutablePeriod0.getMonths();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3656, 3656, (-141), (-141), (-141), 3656, 0, 0, (PeriodType) null);
      mutablePeriod0.setPeriod((long) 0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(490, 490, (-2567), 9);
      mutablePeriod0.add((ReadableDuration) null);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.add((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setPeriod((ReadableInterval) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, 4224, 4224, 0, 0, (-1901), 0);
      mutablePeriod0.addHours(0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearMonthDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod(2042L, 2042L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Duration duration0 = new Duration((Object) null);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, duration0, periodType0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(mockThaiBuddhistDate0, periodType0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.clear();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(490, 490, (-2567), 9);
      mutablePeriod0.setDays(665);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      mutablePeriod0.add(573L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.millis((-5L));
      MutablePeriod mutablePeriod0 = new MutablePeriod(instant0, duration0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PeriodType periodType0 = PeriodType.millis();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1L, periodType0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 1678, 1678, 1678, 0, 0, 0, 0);
      mutablePeriod0.setHours((-2490));
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2648), 4224, 0, 0, (-1901), 0);
      mutablePeriod0.add(1717L);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.add((ReadablePeriod) mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.addSeconds(0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2648), 4224, 0, 0, (-1901), 0);
      mutablePeriod0.setValue(0, (-1901));
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3670, 3670, (-141), (-141), (-141), 3670, 0, 0, (PeriodType) null);
      mutablePeriod0.addMillis(0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      mutablePeriod0.setYears((-2474));
      int int0 = mutablePeriod0.getYears();
      assertEquals((-2474), int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3670, 3670, (-141), (-141), (-141), 3670, 0, 0, (PeriodType) null);
      mutablePeriod0.setSeconds(0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setWeeks(0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      mutablePeriod0.addYears(1678);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1634L), (-1634L));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      PeriodType periodType0 = PeriodType.dayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null, periodType0);
      // Undeclared exception!
      try { 
        mutablePeriod0.setMonths(12825000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'months'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3670, 3670, (-141), (-141), (-141), 3670, 0, 0, (PeriodType) null);
      MutablePeriod mutablePeriod1 = mutablePeriod0.copy();
      assertNotSame(mutablePeriod0, mutablePeriod1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.mergePeriod(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2648), 4224, 0, 0, (-1901), 0);
      mutablePeriod0.addWeeks(0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      PeriodType periodType0 = PeriodType.hours();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1952L, periodType0, (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-1L), (-1L), (Chronology) null);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      // Undeclared exception!
      try { 
        MutablePeriod.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(3670, 3670, 3670, 3670, 3670, 3670, 0, 0, (PeriodType) null);
      Duration duration0 = Duration.standardSeconds(1080);
      mutablePeriod0.setPeriod((ReadableDuration) duration0);
      assertEquals(1080L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Instant instant0 = Instant.now();
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) null, instant0, periodType0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableDuration) null, (ReadableInstant) null);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      // Undeclared exception!
      try { 
        mutablePeriod0.set((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'null'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      mutablePeriod0.add(1194, 1678, 1194, (-2474), (-2123), (-2123), (-4212), (-2138));
      int int0 = mutablePeriod0.getMinutes();
      assertEquals((-2123), int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      PeriodType periodType0 = PeriodType.yearDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      PeriodType periodType0 = PeriodType.minutes();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 26L, periodType0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2644), 4224, (-2644), (-2644), (-1915), (-2644));
      mutablePeriod0.addMinutes((-1));
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(1678, 0, 0, 0);
      mutablePeriod0.addDays(1194);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(92L);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.addMonths((-631));
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setMinutes(0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(4224, 4224, (-2644), 4224, (-2644), (-2644), (-1915), (-2644));
      mutablePeriod0.setPeriod((ReadablePeriod) mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      mutablePeriod0.add(durationFieldType0, 0);
      assertEquals("minutes", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Integer integer0 = new Integer(835);
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod((Object) integer0, (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(490, 490, (-2567), 9);
      mutablePeriod0.setMillis(9);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((ReadableInstant) null, (ReadableInstant) null);
      mutablePeriod0.setPeriod((ReadableDuration) null, (Chronology) null);
  }
}
