/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 05:20:25 GMT 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.AssembledChronology;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.UTCProvider;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IslamicChronology_ESTest extends IslamicChronology_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(623191204, (-292269337));
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_15_BASED.equals(islamicChronology_LeapYearPatternType0);
      assertFalse(boolean0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis((-292269337));
      assertEquals((-8948534433609600000L), long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(1);
      assertEquals((-42521587200000L), long0);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      assertNotNull(iSOChronology0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 292271022);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(iSOChronology0, object0, islamicChronology_LeapYearPatternType0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMax(0);
      assertEquals(29, int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInYearMonth(5, 0);
      assertEquals(29, int0);
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInYearMonth(13, 13);
      assertEquals(30, int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear((-42429744000000L), 3114);
      assertEquals(52789968000000L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB);
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, islamicChronology1.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
      
      boolean boolean0 = islamicChronology1.equals(islamicChronology0);
      assertFalse(boolean0);
      assertFalse(islamicChronology0.equals((Object)islamicChronology1));
      assertFalse(islamicChronology1.equals((Object)islamicChronology0));
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, islamicChronology1.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1453L, (DateTimeZone) null);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertNotNull(gJChronology0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology0.LEAP_YEAR_15_BASED);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, islamicChronology1.getMinimumDaysInFirstWeek());
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, IslamicChronology.AH);
      assertNotSame(islamicChronology0, islamicChronology1);
      assertNotSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB.isLeapYear(3325);
      assertFalse(boolean0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology1 = (IslamicChronology)islamicChronology0.withZone(dateTimeZone0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, islamicChronology1.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertEquals(1, BuddhistChronology.BE);
      assertEquals(1, IslamicChronology.AH);
      assertSame(islamicChronology0, islamicChronology1);
      assertSame(islamicChronology1, islamicChronology0);
      assertNotNull(islamicChronology1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear((-693L), 292271022);
      assertEquals(8948501189049599307L, long0);
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals("+13:00", dateTimeZone0.getID());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(8192);
      assertEquals("+00:00:08.192", dateTimeZone0.getID());
      assertEquals("+00:00:08.192", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(8192, 8192);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      assertEquals("+00:00:08.192", dateTimeZone0.getID());
      assertEquals("+00:00:08.192", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.setYear(8192, 1);
      assertEquals((-42496531191808L), long0);
      assertEquals("+00:00:08.192", dateTimeZone0.getID());
      assertEquals("+00:00:08.192", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.isLeapYear(3359);
      assertTrue(boolean0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.isLeapYear(2087);
      assertFalse(boolean0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearDifference(2172L, 2172L);
      assertEquals(0L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getYearDifference(30672000000L, (-8753302531088751616L));
      assertEquals(285894189L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getYear((-8948534433609600000L));
      assertEquals((-292269329), int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth(1, 0);
      assertEquals(0L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth(354, 354);
      assertEquals(899769600000L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getTotalMillisByYearMonth((-4342), (-4342));
      assertEquals((-11066889600000L), long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMonthOfYear(1937L, 1);
      assertEquals(16683, int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMonthOfYear(15356250, 10000);
      assertEquals((-103428), int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMinYear();
      assertEquals(1, int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getMaxYear();
      assertEquals(292271022, int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getAverageMillisPerYear();
      assertEquals(30617280288L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.getAverageMillisPerMonth();
      assertEquals(2551440384L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      long long0 = islamicChronology0.calculateFirstDayOfYearMillis(2615625);
      assertEquals(80040770784000000L, long0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime(1453L, (DateTimeZone) null);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(mutableDateTime0);
      
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (ReadableInstant) mutableDateTime0);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertNotNull(gJChronology0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(gJChronology0, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(1453L, mutableDateTime0.getMillis());
      assertEquals(0, mutableDateTime0.getRoundingMode());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(4, MutableDateTime.ROUND_HALF_CEILING);
      assertEquals(2, MutableDateTime.ROUND_CEILING);
      assertEquals(3, MutableDateTime.ROUND_HALF_FLOOR);
      assertEquals(5, MutableDateTime.ROUND_HALF_EVEN);
      assertEquals(1, MutableDateTime.ROUND_FLOOR);
      assertEquals(0, MutableDateTime.ROUND_NONE);
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.setYear(4, 3532);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UTCProvider uTCProvider0 = new UTCProvider();
      assertNotNull(uTCProvider0);
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      assertNotNull(iSOChronology0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology(iSOChronology0, uTCProvider0, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getMonthOfYear((-1218L), 1101);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getMonthOfYear(1389, 2147483623);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 2147483623 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertNotNull(dateTimeZone0);
      
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance(dateTimeZone0, (IslamicChronology.LeapYearPatternType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(447);
      assertEquals("+00:00:00.447", dateTimeZone0.toString());
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:00:00.447", dateTimeZone0.getID());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(1809, 1);
      assertNotNull(islamicChronology_LeapYearPatternType0);
      
      // Undeclared exception!
      try { 
        IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, mockJapaneseDate0, (IslamicChronology.LeapYearPatternType) null);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.getDaysInYear(2539);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      // Undeclared exception!
      try { 
        islamicChronology0.calculateFirstDayOfYearMillis(623158436);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 623158436 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      int int0 = islamicChronology0.getDaysInMonthMax(2839L);
      assertEquals(29, int0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = islamicChronology0.getLeapYearPatternType();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology_LeapYearPatternType0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_15_BASED.equals(islamicChronology0.LEAP_YEAR_INDIAN);
      assertFalse(boolean0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertNotNull(dateTimeZone0);
      
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      boolean boolean0 = islamicChronology0.LEAP_YEAR_HABASH_AL_HASIB.equals(islamicChronology0);
      assertFalse(boolean0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+13:00", dateTimeZone0.getID());
      assertEquals("+13:00", dateTimeZone0.toString());
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
      assertNotNull(islamicChronology0);
      
      AssembledChronology.Fields assembledChronology_Fields0 = new AssembledChronology.Fields();
      assertNotNull(assembledChronology_Fields0);
      
      islamicChronology0.assemble(assembledChronology_Fields0);
      assertEquals(4, islamicChronology0.getMinimumDaysInFirstWeek());
      assertEquals(1, IslamicChronology.AH);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      // Undeclared exception!
      try { 
        islamicChronology0.setYear((-693L), 292271029);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too large: 292271029 > 292271022
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      IslamicChronology islamicChronology1 = new IslamicChronology((Chronology) null, islamicChronology0, islamicChronology0.LEAP_YEAR_15_BASED);
      int int0 = islamicChronology1.getDayOfMonth(2592000000L);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      int int0 = islamicChronology0.getMonthOfYear((-42123628800000L));
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      int int0 = islamicChronology0.getDaysInMonthMax(28);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int int0 = islamicChronology0.getDaysInMonthMax(12);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      int int0 = islamicChronology0.getDaysInMonthMax(1);
      assertEquals(30, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int int0 = islamicChronology0.getDaysInYearMonth(12, 12);
      assertEquals(29, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int int0 = islamicChronology0.getDaysInYear((-19));
      assertEquals(355, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int int0 = islamicChronology0.getDaysInYear(3303);
      assertEquals(354, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      long long0 = islamicChronology0.getYearDifference(28, 57);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(2310, 2310);
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, islamicChronology_LeapYearPatternType0);
      int int0 = islamicChronology0.getYear(1);
      assertEquals(1389, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      IslamicChronology islamicChronology1 = IslamicChronology.getInstance(dateTimeZone0);
      boolean boolean0 = islamicChronology1.equals(islamicChronology0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      IslamicChronology islamicChronology1 = new IslamicChronology((Chronology) null, islamicChronology0, islamicChronology0.LEAP_YEAR_15_BASED);
      IslamicChronology islamicChronology2 = new IslamicChronology((Chronology) null, islamicChronology1, islamicChronology0.LEAP_YEAR_15_BASED);
      boolean boolean0 = islamicChronology1.equals(islamicChronology2);
      assertTrue(boolean0);
      assertFalse(islamicChronology2.equals((Object)islamicChronology0));
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      boolean boolean0 = islamicChronology0.equals(fileSystemHandling0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      boolean boolean0 = islamicChronology0.equals(islamicChronology0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      Chronology chronology0 = islamicChronology0.withZone((DateTimeZone) null);
      assertNotSame(chronology0, islamicChronology0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int int0 = islamicChronology0.getDaysInYearMax();
      assertEquals(355, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      long long0 = islamicChronology0.getApproxMillisAtEpochDividedByTwo();
      assertEquals(21260793600000L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(461, 1, 1, 1);
      int[] intArray0 = islamicChronology0.get((ReadablePeriod) mutablePeriod0, 965L, 279260640144L);
      assertArrayEquals(new int[] {9, 1, 2, 0, 4, 23, 59, 179}, intArray0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      long long0 = islamicChronology0.getAverageMillisPerYearDividedByTwo();
      assertEquals(15308640144L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      IslamicChronology islamicChronology1 = new IslamicChronology((Chronology) null, islamicChronology0, islamicChronology0.LEAP_YEAR_15_BASED);
      boolean boolean0 = islamicChronology1.equals(islamicChronology0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      Chronology chronology0 = islamicChronology0.withUTC();
      assertFalse(chronology0.equals((Object)islamicChronology0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(13);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      islamicChronology0.hashCode();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      int int0 = islamicChronology0.getDaysInMonthMax();
      assertEquals(30, int0);
  }
}
