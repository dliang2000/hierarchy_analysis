/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 07:12:34 GMT 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJEraDateTimeField;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GJEraDateTimeField_ESTest extends GJEraDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      Locale locale0 = Locale.KOREA;
      long long0 = gJEraDateTimeField0.set((long) 1, "\uC11C\uAE30", locale0);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      Locale locale0 = Locale.forLanguageTag("\uC11C\uAE30");
      long long0 = gJEraDateTimeField0.set((-4840L), "AD", locale0);
      assertEquals((-4840L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.set((long) 1, 1);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(julianChronology0);
      long long0 = gJEraDateTimeField0.set(0L, 0);
      assertEquals((-124273872000000L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      Locale locale0 = Locale.FRENCH;
      String string0 = gJEraDateTimeField0.getAsText(1, locale0);
      assertEquals("ap. J.-C.", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(ethiopicChronology0);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set((long) 1, "?ORj5{", (Locale) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"?ORj5{\" for era is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set((long) 1, (String) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set((-2610L), (-314));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -314 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set(0L, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundHalfFloor((-1852L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundHalfEven(4L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundHalfCeiling((-846L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundFloor((-1L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.roundCeiling(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField((BasicChronology) null);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.get(183L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.GJEraDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.roundFloor(1);
      assertEquals((-42496790400000L), long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.set((-9223372036854775808L), 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.set(0L, 1);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      int int0 = gJEraDateTimeField0.get(635L);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      int int0 = gJEraDateTimeField0.get((-9223372036854775773L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      int int0 = gJEraDateTimeField0.getMinimumValue();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        gJEraDateTimeField0.getAsText(15356250, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15356250
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(copticChronology0);
      long long0 = gJEraDateTimeField0.roundCeiling((-53206070397528L));
      assertEquals((-53174534400000L), long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.roundCeiling(1282L);
      assertEquals(9223372036854775807L, long0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.roundFloor(9223372036854775807L);
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      DurationField durationField0 = gJEraDateTimeField0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.roundHalfCeiling(0L);
      assertEquals((-42496790400000L), long0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      Locale locale0 = Locale.CHINESE;
      long long0 = gJEraDateTimeField0.set((long) 0, "\u516C\u5143", locale0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      DurationField durationField0 = gJEraDateTimeField0.getDurationField();
      assertEquals(0L, durationField0.getUnitMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      assertEquals(0, gJEraDateTimeField0.getMinimumValue());
      assertEquals(1, gJEraDateTimeField0.getMaximumValue());
      
      long long0 = gJEraDateTimeField0.addWrapField((-42496790400000L), (-2007));
      assertEquals((-42496790400000L), long0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) null);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(gregorianChronology0);
      int int0 = gJEraDateTimeField0.getMaximumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.roundHalfEven((-42496790400000L));
      assertEquals((-42496790400000L), long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType(0, 2376);
      IslamicChronology islamicChronology0 = new IslamicChronology(julianChronology0, julianChronology0, islamicChronology_LeapYearPatternType0);
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      Locale locale0 = Locale.CHINA;
      int int0 = gJEraDateTimeField0.getMaximumTextLength(locale0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      boolean boolean0 = gJEraDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      GJEraDateTimeField gJEraDateTimeField0 = new GJEraDateTimeField(islamicChronology0);
      long long0 = gJEraDateTimeField0.roundHalfFloor(1);
      assertEquals((-42496790400000L), long0);
  }
}
