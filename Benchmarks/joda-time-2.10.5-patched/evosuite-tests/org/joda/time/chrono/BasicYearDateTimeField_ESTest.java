/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 04:48:17 GMT 2020
 */

package org.joda.time.chrono;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.joda.time.Chronology;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationField;
import org.joda.time.chrono.BasicChronology;
import org.joda.time.chrono.BasicYearDateTimeField;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.ZonedChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicYearDateTimeField_ESTest extends BasicYearDateTimeField_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(julianChronology0);
      long long0 = basicYearDateTimeField0.getDifferenceAsLong((-2717), (-2717));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(julianChronology0);
      long long0 = basicYearDateTimeField0.addWrapField(1L, (-2329));
      assertEquals((-73497628799999L), long0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.setExtended(0L, 1389);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      long long0 = basicYearDateTimeField0.setExtended(1, 1847);
      assertEquals(5080752000001L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.setExtended(0, 1);
      assertEquals((-42496790400000L), long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.set((long) 0, 1389);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.set(4260L, 5264);
      assertEquals(118641974404260L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(julianChronology0);
      long long0 = basicYearDateTimeField0.roundFloor(30672000000L);
      assertEquals(1123200000L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(ethiopicChronology0);
      long long0 = basicYearDateTimeField0.roundFloor(0L);
      assertEquals((-9676800000L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.roundCeiling((-76342089600000L));
      assertEquals((-74669731200000L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      long long0 = basicYearDateTimeField0.remainder(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      long long0 = basicYearDateTimeField0.remainder(1);
      assertEquals(9676800001L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      boolean boolean0 = basicYearDateTimeField0.isLeap(30585600001L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(ethiopicChronology0);
      int int0 = basicYearDateTimeField0.getMinimumValue();
      assertEquals((-292269337), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(julianChronology0);
      long long0 = basicYearDateTimeField0.getDifferenceAsLong(0L, (-1483L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(julianChronology0);
      int int0 = basicYearDateTimeField0.get((-73497628799999L));
      assertEquals((-360), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.addWrapField((long) 0, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2726);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      long long0 = basicYearDateTimeField0.add(0L, 0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      long long0 = basicYearDateTimeField0.add((long) 1, (long) 1);
      assertEquals(31536000001L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      long long0 = basicYearDateTimeField0.add((long) 1, (-145L));
      assertEquals((-4575830399999L), long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(ethiopicChronology0);
      long long0 = basicYearDateTimeField0.add((long) (-292269337), (-292269337));
      assertEquals((-9223318829581869337L), long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.set((long) 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-86400011), (-86400011));
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, mockJapaneseDate0, islamicChronology_LeapYearPatternType0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.set(9223372036854775807L, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.roundCeiling(9223372036854775807L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.remainder((-9223372036854775808L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Year is too small: -301245869 < -292269337
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, (Object) null, (IslamicChronology.LeapYearPatternType) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.getLeapAmount((-86400011));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.add((long) 1, 31083663600000L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 31083663600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.add(2697L, 2145993374);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2145995344 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      IslamicChronology islamicChronology0 = new IslamicChronology(gregorianChronology0, "org.joda.time.chrono.BasicYearDateTimeField", (IslamicChronology.LeapYearPatternType) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.add((long) 1, 51);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(ethiopicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.add((long) 1, 2147483548);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 1962 + 2147483548
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BasicYearDateTimeField basicYearDateTimeField0 = null;
      try {
        basicYearDateTimeField0 = new BasicYearDateTimeField((BasicChronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BasicYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      long long0 = basicYearDateTimeField0.roundCeiling(0L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.add((long) 1, 1);
      assertEquals(30585600001L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      int int0 = basicYearDateTimeField0.get(2858L);
      assertEquals(1686, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      long long0 = basicYearDateTimeField0.set(60L, 1);
      assertEquals((-53174534399940L), long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      DurationField durationField0 = basicYearDateTimeField0.getLeapDurationField();
      assertEquals("days", durationField0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      long long0 = basicYearDateTimeField0.roundFloor(1970);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      DurationField durationField0 = basicYearDateTimeField0.getRangeDurationField();
      assertNull(durationField0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.roundCeiling(2069L);
      assertEquals(5788800000L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = new IslamicChronology.LeapYearPatternType((-86400011), (-86400011));
      IslamicChronology islamicChronology0 = new IslamicChronology((Chronology) null, mockJapaneseDate0, islamicChronology_LeapYearPatternType0);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      int int0 = basicYearDateTimeField0.getLeapAmount((-86400011));
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      int int0 = basicYearDateTimeField0.getLeapAmount(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.getDifferenceAsLong(1, 21260793600000L);
      assertEquals((-694L), long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      long long0 = basicYearDateTimeField0.getDifferenceAsLong(31622400000L, 0L);
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      long long0 = basicYearDateTimeField0.addWrapField((long) 1389, 1389);
      assertEquals(42527376001389L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(copticChronology0);
      long long0 = basicYearDateTimeField0.add(0L, 0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      int int0 = basicYearDateTimeField0.getMaximumValue();
      assertEquals(292271022, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.setExtended((-186L), 2146893841);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 2146893841 for year must be in the range [0,292271023]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      int int0 = basicYearDateTimeField0.getMinimumValue();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(gregorianChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.add((-604800000L), (-604800000L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -604798031 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      boolean boolean0 = basicYearDateTimeField0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      boolean boolean0 = basicYearDateTimeField0.isLeap(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(738);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(iSOChronology0, dateTimeZone0);
      Locale locale0 = Locale.FRANCE;
      IslamicChronology islamicChronology0 = new IslamicChronology(zonedChronology0, locale0, (IslamicChronology.LeapYearPatternType) null);
      BasicYearDateTimeField basicYearDateTimeField0 = new BasicYearDateTimeField(islamicChronology0);
      // Undeclared exception!
      try { 
        basicYearDateTimeField0.remainder(738);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.IslamicChronology", e);
      }
  }
}
