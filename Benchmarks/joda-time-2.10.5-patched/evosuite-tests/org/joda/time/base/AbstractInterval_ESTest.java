/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:53:43 GMT 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractInterval_ESTest extends AbstractInterval_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      mutableInterval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
      
      mutableInterval1.setEnd((ReadableInstant) null);
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
      
      mutableInterval0.setInterval((-2941L), (-2941L));
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.now();
      Seconds seconds0 = Seconds.seconds(2944);
      Duration duration0 = seconds0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval0.setEndMillis((-2941L));
      boolean boolean0 = mutableInterval0.isEqual(mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Period period0 = new Period(999L, (Chronology) iSOChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(dateTimeZone0);
      DateTime dateTime0 = mutableDateTime0.toDateTime();
      Interval interval0 = new Interval(period0, dateTime0);
      boolean boolean0 = mutableInterval0.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Interval interval0 = new Interval(452L, 452L);
      Interval interval1 = interval0.overlap((ReadableInterval) null);
      assertNull(interval1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      Interval interval0 = new Interval((-1845L), (-1845L), dateTimeZone0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.withYear(0);
      Interval interval1 = localDate1.toInterval(dateTimeZone0);
      Interval interval2 = interval0.overlap(interval1);
      assertNull(interval2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Interval interval0 = new Interval(452L, 452L);
      Interval interval1 = interval0.withStartMillis(0);
      boolean boolean0 = interval1.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval0.setEndMillis((-2941L));
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) mutableInterval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = new MutableInterval();
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      String string0 = mutableInterval0.toString();
      assertEquals("1969-12-31T18:59:56.455-05:00/1969-12-31T18:59:56.455-05:00", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      PeriodType periodType0 = PeriodType.yearWeekDay();
      Period period0 = mutableInterval0.toPeriod(periodType0);
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = mutableInterval0.toInterval();
      MutableInterval mutableInterval1 = interval0.toMutableInterval();
      assertEquals(0L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      assertEquals((-1L), mutableInterval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Interval interval0 = new Interval((ReadableDuration) null, (ReadableInstant) null);
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval(interval0, buddhistChronology0);
      Interval interval1 = mutableInterval0.toInterval();
      assertFalse(interval1.equals((Object)interval0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      Interval interval0 = mutableInterval0.toInterval();
      assertEquals(962L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      Interval interval0 = mutableInterval0.toInterval();
      assertEquals((-3545L), interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.EPOCH;
      Duration duration0 = new Duration(0L);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      long long0 = mutableInterval0.toDurationMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Instant instant0 = Instant.now();
      Seconds seconds0 = Seconds.seconds(2944);
      Duration duration0 = seconds0.toStandardDuration();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      long long0 = mutableInterval0.toDurationMillis();
      assertEquals(2944000L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Interval interval0 = new Interval(118L, 118L);
      Interval interval1 = interval0.withEnd((ReadableInstant) null);
      Duration duration0 = interval1.toDuration();
      assertEquals(1392409281202L, duration0.getMillis());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      mutableInterval0.setEndMillis((-2941L));
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Interval interval0 = new Interval(604800000L, 604800000L);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.plusMillis((-830));
      boolean boolean0 = interval0.isBefore((ReadableInstant) dateTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) null);
      Interval interval0 = new Interval(3399L, 3399L, julianChronology0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      Instant instant0 = Instant.ofEpochSecond((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInstant) instant0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 2085L);
      Interval interval0 = mutableInterval0.toInterval();
      DateTime dateTime0 = interval0.getStart();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Interval interval0 = new Interval(1492L, 63072000000L);
      Interval interval1 = interval0.withStartMillis((-133896150000000L));
      DateTime dateTime0 = interval1.getStart();
      assertEquals((-133896150000000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      DateTime dateTime0 = interval0.getEnd();
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      DateTime dateTime0 = mutableInterval0.getEnd();
      assertEquals((-3545L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      Duration duration0 = Duration.standardSeconds(2379L);
      Interval interval0 = duration0.toIntervalFrom(dateTime0);
      boolean boolean0 = interval0.containsNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      Instant instant0 = Instant.ofEpochSecond((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      mutableInterval0.setInterval((ReadableInterval) interval0);
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      boolean boolean0 = mutableInterval0.contains((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Interval interval0 = new Interval((-1L), (-1L));
      // Undeclared exception!
      try { 
        interval0.isEqual((ReadableInterval) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      Interval interval0 = new Interval(0L, 0L, dateTimeZone0);
      MutableInterval mutableInterval0 = new MutableInterval(interval0, buddhistChronology0);
      boolean boolean0 = mutableInterval0.isAfter((long) 1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Interval interval0 = new Interval((-4902L), (-4902L));
      boolean boolean0 = interval0.isBefore((-4902L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = new Duration((-1L));
      DateTime dateTime0 = DateTime.now();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-292269061));
      MutableInterval mutableInterval0 = new MutableInterval(duration1, dateTime0);
      boolean boolean0 = mutableInterval0.isBefore((long) (-292269061));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      mutableInterval0.setEndMillis((-2941L));
      boolean boolean0 = mutableInterval1.overlaps(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 0L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.overlaps(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      boolean boolean0 = mutableInterval0.contains((-3545L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Interval interval0 = null;
      try {
        interval0 = new Interval((-923L), (-6147L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The end instant must be greater than the start instant
         //
         verifyException("org.joda.time.base.AbstractInterval", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Duration duration0 = Duration.standardSeconds(2379L);
      Interval interval0 = duration0.toIntervalFrom(dateTime0);
      boolean boolean0 = interval0.containsNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = new MutableInterval();
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      boolean boolean0 = mutableInterval0.equals(mockJapaneseDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      boolean boolean0 = mutableInterval0.equals(mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      MutableInterval mutableInterval1 = mutableInterval0.copy();
      assertTrue(mutableInterval1.equals((Object)mutableInterval0));
      
      mutableInterval0.setEndMillis((-2941L));
      boolean boolean0 = mutableInterval0.equals(mutableInterval1);
      assertFalse(mutableInterval1.equals((Object)mutableInterval0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      Instant instant0 = Instant.EPOCH;
      Duration duration0 = new Duration(0L);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, duration0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = new Instant((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInstant) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Instant instant0 = Instant.ofEpochSecond((-1L));
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(962L, (Chronology) copticChronology0);
      MutableInterval mutableInterval0 = new MutableInterval(instant0, dateTime0);
      boolean boolean0 = mutableInterval0.isAfter((ReadableInstant) instant0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      Interval interval0 = localDate0.toInterval();
      boolean boolean0 = interval0.isAfter(0L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      boolean boolean0 = interval0.isBefore((ReadableInterval) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      boolean boolean0 = mutableInterval0.isBefore((ReadableInterval) mutableInterval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Interval interval0 = new Interval(118L, 118L);
      boolean boolean0 = interval0.isBefore((ReadableInstant) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Interval interval0 = new Interval((Object) null, iSOChronology0);
      Duration duration0 = new Duration(100000000000000L);
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      boolean boolean0 = interval1.isBeforeNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Interval interval0 = new Interval((-4902L), (-4902L));
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      boolean boolean0 = mutableInterval0.isEqual(interval0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      MutableInterval mutableInterval0 = new MutableInterval((ReadableDuration) null, dateTime0);
      Duration duration0 = Duration.standardSeconds(2379L);
      Interval interval0 = duration0.toIntervalFrom(dateTime0);
      boolean boolean0 = mutableInterval0.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(9L, 2103L);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withStartMillis(2103L);
      boolean boolean0 = interval1.isEqual(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Interval interval0 = new Interval(452L, 452L);
      Interval interval1 = interval0.withStartMillis(0);
      boolean boolean0 = interval1.overlaps(interval1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Instant instant0 = Instant.now();
      MutableInterval mutableInterval0 = new MutableInterval();
      mutableInterval0.setInterval((ReadableInstant) instant0, (ReadableInstant) instant0);
      boolean boolean0 = mutableInterval0.overlaps((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(9L, 2103L);
      Period period0 = new Period(2103L);
      Interval interval0 = mutableInterval0.toInterval();
      Interval interval1 = interval0.withPeriodAfterStart(period0);
      boolean boolean0 = interval0.contains((ReadableInterval) interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Interval interval0 = new Interval(452L, 452L);
      Interval interval1 = interval0.withStartMillis(0);
      boolean boolean0 = interval0.contains((ReadableInterval) interval1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.contains((ReadableInterval) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Duration duration0 = Duration.standardSeconds(2379L);
      Interval interval0 = duration0.toIntervalFrom(dateTime0);
      boolean boolean0 = interval0.contains((ReadableInstant) dateTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((-3545L), (-3545L));
      mutableInterval0.setEndMillis((-2941L));
      boolean boolean0 = mutableInterval0.contains((-3545L));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      boolean boolean0 = mutableInterval0.contains((-3545L));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      Interval interval0 = new Interval((Object) null, iSOChronology0);
      boolean boolean0 = interval0.isBeforeNow();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Duration duration0 = new Duration((-1L));
      DateTime dateTime0 = DateTime.now();
      Duration duration1 = duration0.withDurationAdded((ReadableDuration) duration0, (-292269061));
      MutableInterval mutableInterval0 = new MutableInterval(duration1, dateTime0);
      mutableInterval0.hashCode();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Interval interval0 = new Interval((Object) null, gregorianChronology0);
      DateTime dateTime0 = interval0.getEnd();
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Interval interval0 = new Interval(1492L, 63072000000L);
      DateTime dateTime0 = interval0.getStart();
      assertEquals(1492L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(9L, 2103L);
      Interval interval0 = mutableInterval0.toInterval();
      MutableInterval mutableInterval1 = interval0.toMutableInterval();
      assertEquals(2103L, mutableInterval1.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval(0L, 2085L);
      Interval interval0 = mutableInterval0.toInterval();
      boolean boolean0 = interval0.isAfterNow();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Period period0 = mutableInterval0.toPeriod();
      assertNotNull(period0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Interval interval0 = new Interval(452L, 452L);
      Duration duration0 = interval0.toDuration();
      assertEquals(0L, duration0.getMillis());
  }
}
