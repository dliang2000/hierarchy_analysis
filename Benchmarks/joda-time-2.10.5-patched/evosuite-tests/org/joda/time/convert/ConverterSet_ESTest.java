/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 05:31:46 GMT 2020
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockMinguoDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.convert.CalendarConverter;
import org.joda.time.convert.Converter;
import org.joda.time.convert.ConverterSet;
import org.joda.time.convert.DateConverter;
import org.joda.time.convert.LongConverter;
import org.joda.time.convert.NullConverter;
import org.joda.time.convert.ReadableDurationConverter;
import org.joda.time.convert.ReadableInstantConverter;
import org.joda.time.convert.ReadableIntervalConverter;
import org.joda.time.convert.ReadablePartialConverter;
import org.joda.time.convert.ReadablePeriodConverter;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConverterSet_ESTest extends ConverterSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(1599, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      LongConverter longConverter0 = new LongConverter();
      ConverterSet converterSet1 = converterSet0.add(longConverter0, (Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet1.remove(longConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      ReadablePartialConverter readablePartialConverter0 = ReadablePartialConverter.INSTANCE;
      Converter[] converterArray0 = new Converter[2];
      converterArray0[0] = (Converter) stringConverter0;
      converterArray0[1] = (Converter) readablePartialConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(converterArray0[0], converterArray0);
      ReadablePartialConverter readablePartialConverter1 = new ReadablePartialConverter();
      ConverterSet converterSet2 = converterSet1.add(readablePartialConverter1, converterArray0);
      assertNotSame(converterSet0, converterSet2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      LongConverter longConverter0 = new LongConverter();
      ConverterSet.Entry converterSet_Entry0 = new ConverterSet.Entry(class0, longConverter0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      converterSet0.copyInto(converterArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      NullConverter nullConverter0 = new NullConverter();
      StringConverter stringConverter0 = new StringConverter();
      converterArray0[5] = (Converter) stringConverter0;
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      converterArray0[6] = (Converter) readableInstantConverter0;
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      converterArray0[7] = (Converter) dateConverter0;
      converterArray0[8] = (Converter) nullConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<String> class0 = String.class;
      Converter converter0 = converterSet0.select(class0);
      assertSame(converter0, stringConverter0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      LongConverter longConverter0 = LongConverter.INSTANCE;
      // Undeclared exception!
      try { 
        converterSet0.remove(longConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ConverterSet converterSet0 = new ConverterSet((Converter[]) null);
      // Undeclared exception!
      try { 
        converterSet0.remove(99, (Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-1388), (Converter[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove((-1803), converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1803
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Converter[] converterArray0 = new Converter[4];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Converter[] converterArray1 = new Converter[1];
      // Undeclared exception!
      try { 
        converterSet0.copyInto(converterArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      Converter[] converterArray1 = new Converter[4];
      ConverterSet converterSet1 = converterSet0.remove(calendarConverter0, converterArray1);
      assertSame(converterSet0, converterSet1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PeriodPrinter periodPrinter0 = mock(PeriodPrinter.class, new ViolatedAssumptionAnswer());
      PeriodParser periodParser0 = mock(PeriodParser.class, new ViolatedAssumptionAnswer());
      doReturn(924).when(periodParser0).parseInto(any(org.joda.time.ReadWritablePeriod.class) , anyString() , anyInt() , any(java.util.Locale.class));
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodPrinter0, periodParser0);
      MutablePeriod mutablePeriod0 = MutablePeriod.parse("", periodFormatter0);
      assertNotNull(mutablePeriod0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      NullConverter nullConverter0 = new NullConverter();
      DateConverter dateConverter0 = DateConverter.INSTANCE;
      converterArray0[7] = (Converter) dateConverter0;
      converterArray0[8] = (Converter) nullConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        converterSet0.select(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Converter[] converterArray0 = new Converter[5];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(5, converterArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ReadableDurationConverter readableDurationConverter0 = new ReadableDurationConverter();
      ConverterSet converterSet1 = converterSet0.remove(readableDurationConverter0, (Converter[]) null);
      assertSame(converterSet1, converterSet0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      DateConverter dateConverter0 = new DateConverter();
      converterArray0[1] = (Converter) dateConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(converterArray0[1], converterArray0);
      assertNotSame(converterSet1, converterSet0);
      
      ConverterSet converterSet2 = converterSet1.add(converterArray0[1], converterArray0);
      assertSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Converter[] converterArray0 = new Converter[2];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.remove(converterArray0[1], converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      CalendarConverter calendarConverter0 = CalendarConverter.INSTANCE;
      // Undeclared exception!
      try { 
        converterSet0.add(calendarConverter0, converterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      StringConverter stringConverter0 = new StringConverter();
      converterArray0[1] = (Converter) stringConverter0;
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      converterArray0[2] = (Converter) readableInstantConverter0;
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      converterArray0[3] = (Converter) readablePartialConverter0;
      converterArray0[4] = (Converter) readablePartialConverter0;
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[5] = (Converter) calendarConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      CalendarConverter calendarConverter1 = CalendarConverter.INSTANCE;
      ConverterSet converterSet2 = converterSet1.add(calendarConverter1, (Converter[]) null);
      assertNotSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      StringConverter stringConverter0 = new StringConverter();
      converterArray0[1] = (Converter) stringConverter0;
      ReadableInstantConverter readableInstantConverter0 = new ReadableInstantConverter();
      converterArray0[2] = (Converter) readableInstantConverter0;
      ReadablePartialConverter readablePartialConverter0 = new ReadablePartialConverter();
      converterArray0[3] = (Converter) readablePartialConverter0;
      converterArray0[4] = (Converter) readablePartialConverter0;
      CalendarConverter calendarConverter0 = new CalendarConverter();
      converterArray0[5] = (Converter) calendarConverter0;
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      converterArray0[6] = (Converter) readablePeriodConverter0;
      LongConverter longConverter0 = LongConverter.INSTANCE;
      converterArray0[7] = (Converter) longConverter0;
      ReadableIntervalConverter readableIntervalConverter0 = new ReadableIntervalConverter();
      converterArray0[8] = (Converter) readableIntervalConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      ConverterSet converterSet1 = converterSet0.remove(0, converterArray0);
      ConverterSet converterSet2 = converterSet1.add(converterArray0[8], (Converter[]) null);
      assertSame(converterSet2, converterSet1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      StringConverter stringConverter0 = new StringConverter();
      converterArray0[5] = (Converter) stringConverter0;
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.add(converterArray0[5], converterArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ConverterSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Converter[] converterArray0 = new Converter[9];
      DateTime dateTime0 = new DateTime(converterArray0[1], (Chronology) null);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      Class<MockMinguoDate> class0 = MockMinguoDate.class;
      converterSet0.select(class0);
      Converter converter0 = converterSet0.select(class0);
      assertNull(converter0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      int int0 = converterSet0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Converter[] converterArray0 = new Converter[0];
      ConverterSet converterSet0 = new ConverterSet(converterArray0);
      // Undeclared exception!
      try { 
        converterSet0.copyInto((Converter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
