/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 07:00:14 GMT 2020
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritableInterval;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.YearMonth;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.convert.StringConverter;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringConverter_ESTest extends StringConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("M^ls");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"M^ls\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutablePeriod mutablePeriod0 = new MutablePeriod(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      PeriodType periodType0 = stringConverter0.getPeriodType("3");
      MutablePeriod mutablePeriod0 = new MutablePeriod(4174L, periodType0);
      Instant instant0 = Instant.parse("3");
      Chronology chronology0 = instant0.getChronology();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) mutablePeriod0, chronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.MutablePeriod cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      MutableInterval mutableInterval0 = new MutableInterval((-1590L), (-1590L), (Chronology) null);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) null, (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, (ReadableInstant) null);
      TimeZone timeZone0 = TimeZone.getDefault();
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) null);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(gJChronology0, dateTimeZone0);
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) mutableInterval0, (Chronology) zonedChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.MutableInterval cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      YearMonth yearMonth0 = new YearMonth();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2798));
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_16_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) yearMonth0, (Object) "F@j^*s<gNH9ZN0Wuo", (Chronology) islamicChronology0, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      Date date0 = dateTime0.toDate();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localDate0, (Object) "org/joda/time/tz/data", (Chronology) gJChronology0, dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      LocalTime localTime0 = new LocalTime();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) localTime0, (Object) localTime0, (Chronology) copticChronology0, dateTimeFormatter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.joda.time.LocalTime cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis("t1PvDL", copticChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"t1PvDL\" is malformed at \"PvDL\"
         //
         verifyException("org.joda.time.format.DateTimeParserBucket", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis(mockJapaneseDate0, buddhistChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis(object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      Class<?> class0 = stringConverter0.getSupportedType();
      assertFalse(class0.isEnum());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "0ZLpfhI=bH", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Format requires a '/' separator: 0ZLpfhI=bH
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritableInterval) mutableInterval0, (Object) "0ZLpfhI=/SH", (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"0ZLpfhI=\" is malformed at \"ZLpfhI=\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, 4484L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      // Undeclared exception!
      try { 
        stringConverter0.setInto((ReadWritablePeriod) mutablePeriod0, (Object) "", (Chronology) gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod("p");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("pu,Y&}:$eVs;uRa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"pu,Y&}:$eVs;uRa\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("P=#%UfN<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"P=#%UfN<\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("xp$ZS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"xp$ZS\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      // Undeclared exception!
      try { 
        stringConverter0.getDurationMillis("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      Date date0 = dateTime0.toDate();
      LocalDate localDate0 = LocalDate.fromDateFields(date0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(80).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTimeFormatter dateTimeFormatter1 = dateTimeFormatter0.withZoneUTC();
      int[] intArray0 = stringConverter0.getPartialValues((ReadablePartial) localDate0, (Object) "org/joda/time/tz/data", (Chronology) gJChronology0, dateTimeFormatter1);
      assertArrayEquals(new int[] {1970, 1, 1}, intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringConverter stringConverter0 = new StringConverter();
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(copticChronology0);
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        stringConverter0.getPartialValues((ReadablePartial) null, (Object) null, (Chronology) lenientChronology0, dateTimeFormatter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeParserInternalParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod("PeriodFormat.seconds");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"PeriodFormat.seconds\"
         //
         verifyException("org.joda.time.convert.StringConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringConverter stringConverter0 = StringConverter.INSTANCE;
      Instant instant0 = Instant.EPOCH;
      Chronology chronology0 = instant0.getChronology();
      // Undeclared exception!
      try { 
        stringConverter0.getInstantMillis((Object) null, chronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }
}
