/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:02:02 GMT 2020
 */

package org.joda.time.convert;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.MutablePeriod;
import org.joda.time.PeriodType;
import org.joda.time.ReadWritablePeriod;
import org.joda.time.Seconds;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.convert.ReadablePeriodConverter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ReadablePeriodConverter_ESTest extends ReadablePeriodConverter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      // Undeclared exception!
      try { 
        readablePeriodConverter0.setInto((ReadWritablePeriod) null, (Object) null, strictChronology0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      PeriodType periodType1 = periodType0.withMinutesRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType1);
      MutablePeriod mutablePeriod1 = new MutablePeriod(604800000L, 1794L, periodType0, copticChronology0);
      // Undeclared exception!
      try { 
        readablePeriodConverter0.setInto(mutablePeriod0, mutablePeriod1, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Period does not support field 'minutes'
         //
         verifyException("org.joda.time.base.BasePeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      Object object0 = new Object();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.setInto((ReadWritablePeriod) null, object0, islamicChronology0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      // Undeclared exception!
      try { 
        readablePeriodConverter0.getPeriodType(mockThaiBuddhistDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate cannot be cast to org.joda.time.ReadablePeriod
         //
         verifyException("org.joda.time.convert.ReadablePeriodConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      Class<?> class0 = readablePeriodConverter0.getSupportedType();
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = new ReadablePeriodConverter();
      Duration duration0 = Duration.standardHours((-693L));
      Seconds seconds0 = duration0.toStandardSeconds();
      PeriodType periodType0 = readablePeriodConverter0.getPeriodType(seconds0);
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ReadablePeriodConverter readablePeriodConverter0 = ReadablePeriodConverter.INSTANCE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod((Object) null, periodType0);
      readablePeriodConverter0.setInto(mutablePeriod0, mutablePeriod0, buddhistChronology0);
      assertEquals(1, BuddhistChronology.BE);
  }
}
