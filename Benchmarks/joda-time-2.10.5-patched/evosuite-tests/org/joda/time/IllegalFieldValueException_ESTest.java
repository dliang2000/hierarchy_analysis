/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:30:05 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.DateTimeFieldType;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.IllegalFieldValueException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IllegalFieldValueException_ESTest extends IllegalFieldValueException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("?vn>&~f2", (byte)23, 6, 0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 23 for ?vn>&~f2 must be in the range [6,0]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      Short short0 = new Short((short) (-2600));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, short0, short0, short0);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value -2600 for yearOfEra must be in the range [-2600,-2600]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, 0, "[)_B");
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 0 for yearOfEra is not supported: [)_B", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (byte)4, 7, 2);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 4 for null must be in the range [7,2]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, (-1022), (Number) null);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value null for millisOfSecond must not be smaller than -1022", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      Long long0 = new Long((-4103L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, long0, long0, long0);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value -4103 for hours must be in the range [-4103,-4103]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("X*B}", "X*B}");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"X*B}\" for X*B} is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("millisOfSecond", 0, 16, 8);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 0 for millisOfSecond must be in the range [16,8]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKS_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (byte)5, 11, 8);
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value 5 for weeks must be in the range [11,8]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, (-1022), (Number) null);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value null for millisOfSecond must not be smaller than -1022", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", 7, (byte)9, (byte)21);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value 7 for  must be in the range [9,21]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, (Number) null, (Number) null, (Number) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, 9, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, 12, 2, (byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, "C!2");
      assertEquals("Value \"C!2\" for dayOfWeek is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.millis((-1L));
      Hours hours0 = duration0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, "5[xpLxe3KNs9=mES");
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value \"5[xpLxe3KNs9=mES\" for hours is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (byte)126, (byte)126, (byte)126);
      illegalFieldValueException0.prependMessage((String) null);
      assertEquals("Value 126 for months must be in the range [126,126]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      Long long0 = new Long((-4103L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, long0, long0, long0);
      illegalFieldValueException0.prependMessage("");
      assertEquals(": Value -4103 for hours must be in the range [-4103,-4103]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (Number) null, (Number) null, (Number) null);
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertNotNull(string0);
      assertEquals("Value null for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      String string0 = illegalFieldValueException0.getIllegalValueAsString();
      assertEquals("", string0);
      assertEquals("Value \"\" for  is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (String) null);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value null for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (Number) null, (-1022), (Number) null);
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value null for millisOfSecond must not be smaller than -1022", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, 3, (Number) null, (byte)15);
      assertEquals("Value 3 for hourOfDay must not be larger than 15", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, 7, 6, (byte)9);
      illegalFieldValueException0.getUpperBound();
      assertEquals("Value 7 for halfdays must be in the range [6,9]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DurationFieldType) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = null;
      try {
        illegalFieldValueException0 = new IllegalFieldValueException((DateTimeFieldType) null, "PeriodFormat.commaspace");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.IllegalFieldValueException", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      Long long0 = new Long((-4103L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, long0, long0, long0);
      illegalFieldValueException0.getIllegalStringValue();
      assertEquals("Value -4103 for hours must be in the range [-4103,-4103]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("", "");
      String string0 = illegalFieldValueException0.getMessage();
      assertEquals("Value \"\" for  is not supported", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException("millisOfSecond", 0, 16, 8);
      illegalFieldValueException0.getDurationFieldType();
      assertEquals("Value 0 for millisOfSecond must be in the range [16,8]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException((String) null, (Number) null, (Number) null, (Number) null);
      illegalFieldValueException0.getFieldName();
      assertEquals("Value null for null is not supported", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, (byte)22, 0, (byte)126);
      illegalFieldValueException0.getLowerBound();
      assertEquals("Value 22 for minutes must be in the range [0,126]", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(dateTimeFieldType0, (-126), "(Z/kO%Uv%/Z");
      illegalFieldValueException0.getIllegalNumberValue();
      assertEquals("Value -126 for yearOfEra is not supported: (Z/kO%Uv%/Z", illegalFieldValueException0.getMessage());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      Long long0 = new Long((-4103L));
      IllegalFieldValueException illegalFieldValueException0 = new IllegalFieldValueException(durationFieldType0, long0, long0, long0);
      illegalFieldValueException0.getDateTimeFieldType();
      assertEquals("Value -4103 for hours must be in the range [-4103,-4103]", illegalFieldValueException0.getMessage());
  }
}
