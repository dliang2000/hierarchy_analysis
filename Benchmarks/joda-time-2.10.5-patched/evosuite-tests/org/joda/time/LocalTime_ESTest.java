/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:56:15 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeUtils;
import org.joda.time.DateTimeZone;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalTime_ESTest extends LocalTime_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(20L, (DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy((-2582));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime localTime1 = localTime0.minusMillis((-2796));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      LocalTime localTime1 = localTime0.minusSeconds((-84));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.minusMinutes(501);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) ethiopicChronology0);
      LocalTime localTime1 = localTime0.minusHours((-2406));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusMillis((-2147483050));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      LocalTime localTime1 = localTime0.plusSeconds(1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.plusMinutes((-550));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = new LocalTime(1000L, (Chronology) iSOChronology0);
      LocalTime localTime1 = localTime0.plusHours((-1725));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2109L));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(iSOChronology0);
      LocalTime localTime0 = new LocalTime((-1073741823), 14, 11, 11, lenientChronology0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(40, (-2313), (-46), 3, (-2313), 40);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      Locale locale0 = Locale.CANADA;
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy((String) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value null for millisOfSecond is not supported
         //
         verifyException("org.joda.time.field.BaseDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.setCopy(76);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      long long0 = localTime_Property0.getMillis();
      assertEquals(55281320L, long0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 20, 0, 0);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      DateTimeField dateTimeField0 = localTime_Property0.getField();
      assertEquals(0, dateTimeField0.getMinimumValue());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, (DateTimeField) null);
      // Undeclared exception!
      try { 
        localTime_Property0.setCopy("_>w^ys%d[s.E5");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1408L));
      LocalTime localTime1 = localTime0.withMinuteOfHour(23);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateTimeUtils.MillisProvider dateTimeUtils_MillisProvider0 = mock(DateTimeUtils.MillisProvider.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(dateTimeUtils_MillisProvider0).getMillis();
      DateTimeUtils.setCurrentMillisProvider(dateTimeUtils_MillisProvider0);
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertEquals(0L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTimeUtils.setCurrentMillisFixed(0L);
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday();
      assertEquals((-68400000L), dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalTime localTime0 = LocalTime.parse("", dateTimeFormatter0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LocalTime localTime0 = LocalTime.parse("6");
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.MIDNIGHT.withMillisOfDay(38);
      int int0 = localTime1.getValue(1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      int int0 = localTime0.getSecondOfMinute();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      int int0 = localTime0.getMinuteOfHour();
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = localTime0.MIDNIGHT.getMillisOfSecond();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1550L));
      LocalTime localTime1 = localTime0.MIDNIGHT.withLocalMillis(0L);
      long long0 = localTime1.getLocalMillis();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) gJChronology0);
      long long0 = localTime0.getLocalMillis();
      assertEquals(68400000L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(lenientChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, uTCDateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) zonedChronology0);
      int int0 = localTime0.MIDNIGHT.getHourOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      DateTimeField dateTimeField0 = localTime0.getField(0, chronology0);
      assertTrue(dateTimeField0.isSupported());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime0 = new LocalTime(2592000000L, (Chronology) julianChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      int int0 = localTime0.get(dateTimeFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        localTime0.withSecondOfMinute(1324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1324 for secondOfMinute must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      Period period0 = new Period(3600L);
      Period period1 = period0.minusMonths(216);
      Period period2 = period1.withSeconds(216);
      // Undeclared exception!
      try { 
        localTime0.MIDNIGHT.withPeriodAdded(period2, (-2147483597));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Magnitude of add amount is too large: 463856456952
         //
         verifyException("org.joda.time.chrono.BasicMonthOfYearDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        localTime0.withMillisOfSecond((-479));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -479 for millisOfSecond must be in the range [0,999]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      GregorianCalendar gregorianCalendar0 = dateTime0.toGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(gregorianCalendar0);
      // Undeclared exception!
      try { 
        localTime0.withHourOfDay((-2917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2917 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3491), (-3491), (-3491), (-3491), (-3491), (-3491));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      MutablePeriod mutablePeriod0 = new MutablePeriod((-2147483581), (-2147483581), 501, (-2147483581), (-1236), 3600000, (-2324), (-2324));
      // Undeclared exception!
      try { 
        localTime0.plus(mutablePeriod0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147481611 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null, dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("*MeGV2J3JJGiw|$p1", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalTime.parse("~99TBI8PhC", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"~99TBI8PhC\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = new DateTime(86400000L, dateTimeZone0);
      DateTime dateTime1 = DateTime.now();
      LimitChronology limitChronology0 = LimitChronology.getInstance(copticChronology0, dateTime0, dateTime1);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((Chronology) limitChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is above the supported maximum of 1730-06-07T15:21:21.320Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(mockThaiBuddhistDate0, uTCDateTimeZone0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      MockHijrahDate mockHijrahDate0 = new MockHijrahDate();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) uTCDateTimeZone0);
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(mockHijrahDate0, iSOChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(object0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No partial converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-3148), (-3148), (-3148), (-3148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -3148 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime(430, 572);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 430 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      Period period0 = new Period(0L, 0L, copticChronology0);
      LocalTime localTime1 = localTime0.withPeriodAdded(period0, 1);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_INDIAN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0, islamicChronology_LeapYearPatternType0);
      LocalTime localTime0 = new LocalTime((-1919L), (Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      LocalTime localTime1 = localTime0.MIDNIGHT.withField(dateTimeFieldType0, 1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      TimeZone timeZone0 = uTCDateTimeZone0.toTimeZone();
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      LocalTime localTime1 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-1550L));
      LocalTime localTime1 = localTime0.MIDNIGHT.withLocalMillis(0L);
      int int0 = localTime0.MIDNIGHT.compareTo((ReadablePartial) localTime1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      boolean boolean0 = localTime0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.WEEKYEARS_TYPE;
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.MINUTES_TYPE;
      boolean boolean0 = localTime0.MIDNIGHT.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(0L, dateTimeZone0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(10000000000L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfDay();
      boolean boolean0 = localTime0.isSupported(dateTimeFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      int int0 = localTime0.get(dateTimeFieldType0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.getValue(1);
      assertEquals(21, int0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-124L));
      int int0 = localTime0.getValue(0);
      assertEquals(23, int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0, 0);
      int int0 = localTime0.getMillisOfDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = new LocalTime((DateTimeZone) uTCDateTimeZone0);
      Chronology chronology0 = localTime0.getChronology();
      assertNotNull(chronology0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.size();
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Object) null, gregorianChronology0);
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) uTCDateTimeZone0);
      assertEquals(1392409281320L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483617)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        LocalTime.parse("", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1524), 0, 0, (-1524), (Chronology) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1524 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 3, 3, 0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      // Undeclared exception!
      try { 
        localTime_Property0.addNoWrapToCopy(1567);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The addition exceeded the boundaries of LocalTime
         //
         verifyException("org.joda.time.LocalTime$Property", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.addNoWrapToCopy(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1408L));
      Locale locale0 = Locale.TAIWAN;
      String string0 = localTime0.MIDNIGHT.toString((String) null, locale0);
      assertEquals("00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = new LocalTime(1000L, (Chronology) iSOChronology0);
      Locale locale0 = Locale.CANADA_FRENCH;
      try { 
        localTime0.MIDNIGHT.toString("", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid pattern specification
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      String string0 = localTime0.toString((String) null);
      assertEquals("15:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.toString("pGP}-BJHT!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.joda.time.format.DateTimeFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.year();
      // Undeclared exception!
      try { 
        localTime0.property(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'year' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        localTime0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      LocalTime localTime1 = localTime0.minusMillis(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.MIDNIGHT.minusMillis(1);
      assertFalse(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L);
      LocalTime localTime1 = localTime0.minusSeconds(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3491), (-3491), (-3491), (-3491), (-3491), (-3491));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.minusSeconds(1932735283);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime localTime1 = localTime0.minusMinutes(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = new LocalTime((-124L), (Chronology) gJChronology0);
      LocalTime localTime1 = localTime0.minusMinutes((-438));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      LocalTime localTime1 = localTime0.minusHours(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.minusHours(1567);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2));
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = LocalTime.now((Chronology) gregorianChronology0);
      LocalTime localTime1 = localTime0.plusMillis(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.plusMillis(9);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime localTime1 = localTime0.plusSeconds(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.MIDNIGHT.plusSeconds((-3772));
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(553L);
      LocalTime localTime1 = localTime0.plusMinutes(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.MIDNIGHT.plusMinutes(9);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      LocalTime localTime1 = localTime0.plusHours(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.plusHours(1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = new Period(73281320L, (-3130L));
      Hours hours0 = period0.toStandardHours();
      LocalTime localTime1 = localTime0.withPeriodAdded(hours0, 0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3491), (-3491), (-3491), (-3491), (-3491), (-3491));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.withPeriodAdded((ReadablePeriod) null, (-3491));
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.HOURS_TYPE;
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, 0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3491), (-3491), (-3491), (-3491), (-3491), (-3491));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded(durationFieldType0, 121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'eras' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        localTime0.withFieldAdded((DurationFieldType) null, (-2331));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = new Period(73281320L, (-3130L));
      Hours hours0 = period0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      LocalTime localTime1 = localTime0.withFieldAdded(durationFieldType0, (-360));
      assertNotSame(localTime1, localTime0);
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(0L, dateTimeZone0);
      // Undeclared exception!
      try { 
        localTime0.withField((DateTimeFieldType) null, 128);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime localTime1 = localTime0.withFields((ReadablePartial) null);
      assertEquals(4, localTime1.size());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.withFields(localTime0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = LocalTime.now();
      boolean boolean0 = localTime0.isBefore(localTime1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay((-1408L));
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalTime localTime1 = new LocalTime((-1408L), (Chronology) julianChronology0);
      boolean boolean0 = localTime0.MIDNIGHT.isBefore(localTime1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = LocalTime.now((Chronology) copticChronology0);
      boolean boolean0 = localTime1.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      boolean boolean0 = localTime0.MIDNIGHT.equals(localTime0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      boolean boolean0 = localTime0.MIDNIGHT.equals(localTime0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      boolean boolean0 = localTime0.equals(mockThaiBuddhistDate0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      boolean boolean0 = localTime0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(20, 0);
      boolean boolean0 = localTime0.isSupported((DateTimeFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        localTime0.get(dateTimeFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field 'era' is not supported
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, 0, 0, 20, 207, 207);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localTime0.get((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Chronology) null);
      // Undeclared exception!
      try { 
        localTime0.getValue((-328));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -328
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        localTime0.getField((-1540), (Chronology) iSOChronology0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index: -1540
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromDateFields((Date) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The date must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.fromCalendarFields((Calendar) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The calendar must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.LocalTime", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-3491), (-3491), (-3491), (-3491), (-3491), (-3491));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        localTime0.withMinuteOfHour((-2147483646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147483646 for minuteOfHour must be in the range [0,59]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.withSecondOfMinute(9);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LocalTime localTime0 = null;
      try {
        localTime0 = new LocalTime((-1402), (-1402), (-4574));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1402 for hourOfDay must be in the range [0,23]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.getHourOfDay();
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      String string0 = localTime0.toString();
      assertEquals("20:21:21.320", string0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime localTime1 = localTime0.withMillisOfSecond(305);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.getMillisOfSecond();
      assertEquals(320, int0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null, (DateTimeZone) null);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Object) null, copticChronology0);
      PeriodType periodType0 = PeriodType.yearDayTime();
      Period period0 = new Period((long) 1, periodType0);
      LocalTime localTime1 = localTime0.plus(period0);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = localTime0.MIDNIGHT.getSecondOfMinute();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      int int0 = localTime0.MIDNIGHT.getMinuteOfHour();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((DateTimeZone) null);
      int int0 = localTime0.getMillisOfDay();
      assertEquals(55281320, int0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      Period period0 = new Period(73281320L, (-3130L));
      Hours hours0 = period0.toStandardHours();
      LocalTime localTime1 = localTime0.minus(hours0);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(73281320L, (Chronology) strictChronology0);
      assertEquals(4, localTime0.size());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      MockDate mockDate0 = new MockDate(9, 9, 9, (-49), (-49), 1);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.withHourOfDay(1);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      // Undeclared exception!
      try { 
        LocalTime.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      DateTime dateTime0 = localTime0.MIDNIGHT.toDateTimeToday();
      assertEquals(1392354000000L, dateTime0.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.addWrapFieldToCopy(1884);
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.getLocalTime();
      assertSame(localTime0, localTime1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Object) null, gregorianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.minuteOfHour();
      LocalTime localTime1 = localTime_Property0.addCopy((long) 0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.roundHalfCeilingCopy();
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundHalfEvenCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      LocalTime.Property localTime_Property0 = localTime0.secondOfMinute();
      LocalTime localTime1 = localTime_Property0.roundCeilingCopy();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      LocalTime.Property localTime_Property0 = localTime0.MIDNIGHT.millisOfSecond();
      LocalTime localTime1 = localTime_Property0.roundHalfFloorCopy();
      assertTrue(localTime1.equals((Object)localTime0));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      LocalTime localTime0 = new LocalTime((Chronology) julianChronology0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      LocalTime localTime1 = localTime_Property0.addCopy(0);
      assertSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(10000000018L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.secondOfMinute();
      LocalTime.Property localTime_Property0 = new LocalTime.Property(localTime0, dateTimeField0);
      LocalTime localTime1 = localTime_Property0.withMinimumValue();
      assertNotSame(localTime1, localTime0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      LocalTime localTime0 = LocalTime.now((DateTimeZone) uTCDateTimeZone0);
      LocalTime.Property localTime_Property0 = localTime0.hourOfDay();
      Chronology chronology0 = localTime_Property0.getChronology();
      LocalDate localDate0 = LocalDate.now(chronology0);
      // Undeclared exception!
      try { 
        localTime0.compareTo((ReadablePartial) localDate0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // ReadablePartial objects must have matching field types
         //
         verifyException("org.joda.time.base.AbstractPartial", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) islamicChronology0);
      LocalTime.Property localTime_Property0 = localTime0.property(dateTimeFieldType0);
      LocalTime localTime1 = localTime_Property0.withMaximumValue();
      int int0 = localTime0.compareTo((ReadablePartial) localTime1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      LocalTime.Property localTime_Property0 = localTime0.millisOfDay();
      LocalTime localTime1 = localTime_Property0.roundFloorCopy();
      assertSame(localTime1, localTime0);
  }
}
