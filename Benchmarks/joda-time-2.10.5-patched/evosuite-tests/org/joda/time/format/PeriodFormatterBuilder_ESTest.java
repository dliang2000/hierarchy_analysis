/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 04:39:28 GMT 2020
 */

package org.joda.time.format;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Spliterator;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.time.chrono.MockJapaneseDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.PeriodFormat;
import org.joda.time.format.PeriodFormatter;
import org.joda.time.format.PeriodFormatterBuilder;
import org.joda.time.format.PeriodParser;
import org.joda.time.format.PeriodPrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PeriodFormatterBuilder_ESTest extends PeriodFormatterBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("YHzhWaue!", "&P(oX6)-F");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2965));
      assertEquals("&P(oX6)-F", stringWriter0.toString());
      assertEquals("&P(oX6)-F", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      
      stringBuffer0.trimToSize();
      assertEquals("&P(oX6)-F", stringWriter0.toString());
      assertEquals("&P(oX6)-F", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-2965));
      assertEquals("&P(oX6)-F&P(oX6)-F&P(oX6)-F", stringWriter0.toString());
      assertEquals("&P(oX6)-F&P(oX6)-F&P(oX6)-F", stringBuffer0.toString());
      assertEquals(27, stringBuffer0.length());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("&P(oX6)-F", (-246));
      assertEquals((-10), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.minimumPrintedDigits(1685);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder2.appendSuffix("D");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder3.appendPrefix("6ljso[T2Y*vbM");
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.printZeroIfSupported();
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder9);
      
      int int1 = periodFormatterBuilder_CompositeAffix0.scan("Multiplication overflows a long: ", (-246));
      assertEquals(245, int1);
      assertFalse(int1 == int0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w";
      stringArray0[1] = "org\u0000joda\u0000time\u0000field\u0000SkipUndoDateTimeField";
      stringArray0[2] = "riodformatterbui";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder0.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder2.minimumPrintedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder_Composite0);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "(p=28LkG";
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder10);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder10.append(periodFormatter0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder11);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      stringArray1[1] = "PeriodFormat.second";
      PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder7.appendSeparator("(p=28LkG");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder12);
      
      stringArray1[2] = "Invalid pattern specification";
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      stringArray1[3] = "";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Prefix not followed by field", "Invalid pattern specification", stringArray1, periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, true, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "(p=28LkG");
      assertNotNull(stringBuffer0);
      assertEquals(8, stringBuffer0.length());
      assertEquals("(p=28LkG", stringBuffer0.toString());
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      Period period0 = new Period((long) 0, periodType0);
      assertNotNull(period0);
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals("(p=28LkG000riodformatterbuiInvalid pattern specification000riodformatterbui", stringBuffer0.toString());
      assertEquals(75, stringBuffer0.length());
      assertEquals(1, periodType0.size());
      assertEquals("Millis", periodType0.getName());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = null;
      try {
        periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray1, stringArray1);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 8
         // (p=28LkG
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("Cannot have two adjacent separators", 8);
      assertEquals(8, int0);
      
      stringArray0[1] = "EST";
      stringArray0[2] = "07*5";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      boolean boolean0 = linkedList0.add((Object) periodFormatterBuilder_RegExAffix0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("ohzy?>Q{z_3CSc");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("ohzy?>Q{z_3CSc", true);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      assertNotNull(mockPrintWriter0);
      
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) mockPrintWriter0, 2640);
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("ohzy?>Q{z_3CSc", 0);
      assertEquals(15, int0);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer("j$H@][$+cR");
      assertNotNull(stringBuffer0);
      assertEquals(10, stringBuffer0.length());
      assertEquals("j$H@][$+cR", stringBuffer0.toString());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      assertNotNull(julianChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, julianChronology0.getMinimumDaysInFirstWeek());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 15, (Chronology) julianChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, julianChronology0.getMinimumDaysInFirstWeek());
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, julianChronology0.getMinimumDaysInFirstWeek());
      
      Period period1 = period0.plusSeconds(0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(4, julianChronology0.getMinimumDaysInFirstWeek());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it_IT", locale0.toString());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) period1, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("The DateTimeField must not be null");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroIfSupported();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendSeparatorIfFieldsAfter("must be in the range [");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder8);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The DateTimeField must not be null";
      stringArray0[1] = "The DateTimeField must not be null";
      stringArray0[2] = "The DateTimeField must not be null";
      stringArray0[3] = "The DateTimeField must not be null";
      stringArray0[4] = "The DateTimeField must not be null";
      stringArray0[5] = "The DateTimeField must not be null";
      stringArray0[6] = "The DateTimeField must not be null";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan("The DateTimeField must not be null", 0);
      assertEquals((-35), int0);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder9);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 0, 0, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Partial partial0 = new Partial(gJChronology0);
      assertNotNull(partial0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = new Period(partial0, partial0, periodType0);
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      periodFormatterBuilder_FieldFormatter0.finish(periodFormatterBuilder_FieldFormatterArray0);
      Period period1 = period0.plusMinutes(15);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period2 = period1.plusHours((-23));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PeriodFormat.day";
      stringArray0[1] = "format.periodfor";
      stringArray0[2] = "format.periodfor";
      stringArray0[3] = "format.periodfor";
      stringArray0[4] = "format.periodfor";
      stringArray0[5] = "format.periodfor";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format,h8thmxpo`m_f6)wbuilder");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("PeriodFormat.day", "format.periodfor", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, false, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("L+sbDW");
      assertNotNull(stringBuffer0);
      assertEquals("L+sbDW", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      
      Period period0 = Period.millis(67);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      int int0 = period0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals("hours", durationFieldType0.getName());
      assertEquals("hours", durationFieldType0.toString());
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours0.size());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("L+sbDW67 millisecondes67 millisecondes", stringBuffer0.toString());
      assertEquals(38, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "PeriodFormat.day";
      stringArray0[1] = "format.periodfor";
      stringArray0[2] = "format.periodfor";
      stringArray0[3] = "format.periodfor";
      stringArray0[4] = "format.periodfor";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format,h8thmxpo`m_f6)wbuilder");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("PeriodFormat.day", "format.periodfor", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, false, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      StringBuffer stringBuffer0 = new StringBuffer("L+sbDW");
      assertNotNull(stringBuffer0);
      assertEquals("L+sbDW", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      
      Period period0 = Period.millis(67);
      assertNotNull(period0);
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      
      Locale locale1 = Locale.FRENCH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale1);
      assertNotSame(locale1, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertEquals(38, stringBuffer0.length());
      assertEquals("L+sbDW67 millisecondes67 millisecondes", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("YHzhWaue!.", "&P(oX6)-F");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2965));
      assertEquals("&P(oX6)-F", stringWriter0.toString());
      assertEquals(9, stringBuffer0.length());
      assertEquals("&P(oX6)-F", stringBuffer0.toString());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("YHzhWaue!.");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.minimumPrintedDigits(1685);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder0.appendSuffix("D");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder2.appendSeparator("[&TfHm=BRmon,We^]");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder3.appendPrefix("6ljso[T2Y*vbM");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix1 = new PeriodFormatterBuilder.PluralAffix((String) null, (String) null);
      assertNotNull(periodFormatterBuilder_PluralAffix1);
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(556, 1685, 101, false, 1094, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_PluralAffix1);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertFalse(periodFormatterBuilder_PluralAffix0.equals((Object)periodFormatterBuilder_PluralAffix1));
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertFalse(periodFormatterBuilder_PluralAffix0.equals((Object)periodFormatterBuilder_PluralAffix1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      PeriodType periodType0 = PeriodType.millis();
      assertNotNull(periodType0);
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter1.isSupported(periodType0, 86400000);
      assertNotSame(periodFormatterBuilder_PluralAffix1, periodFormatterBuilder_PluralAffix0);
      assertNotSame(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix1);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(boolean0);
      assertFalse(periodFormatterBuilder_PluralAffix1.equals((Object)periodFormatterBuilder_PluralAffix0));
      assertFalse(periodFormatterBuilder_PluralAffix0.equals((Object)periodFormatterBuilder_PluralAffix1));
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("Millis", periodType0.getName());
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.joda.time.format.period,h8thmxpo`m_f6)w");
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 0, 0, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Partial partial0 = new Partial(gJChronology0);
      assertNotNull(partial0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = new Period(partial0, partial0, periodType0);
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.plusMinutes(15);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod();
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      int int0 = periodFormatterBuilder_FieldFormatter0.parseInto(mutablePeriod0, "org/joda/time/tz/data", 46, locale0);
      assertEquals(46, int0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      Period period2 = period1.plusHours((-23));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      boolean boolean1 = periodFormatterBuilder_FieldFormatter0.isZero(period1);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Locale locale1 = Locale.FRANCE;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("FR", locale1.getCountry());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("FRA", locale1.getISO3Country());
      assertEquals("fr_FR", locale1.toString());
      assertEquals("fra", locale1.getISO3Language());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 0, 4, true, 4, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 4);
      assertNotNull(dateTimeZone0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:04", dateTimeZone0.getID());
      assertEquals("+00:04", dateTimeZone0.toString());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:04", dateTimeZone0.getID());
      assertEquals("+00:04", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Partial partial0 = new Partial(gJChronology0);
      assertNotNull(partial0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:04", dateTimeZone0.getID());
      assertEquals("+00:04", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = new Period(partial0, partial0, periodType0);
      assertNotNull(period0);
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:04", dateTimeZone0.getID());
      assertEquals("+00:04", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.plusMinutes(15);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:04", dateTimeZone0.getID());
      assertEquals("+00:04", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period2 = period1.plusHours((-23));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period1);
      assertNotSame(period2, period0);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertFalse(period2.equals((Object)period0));
      assertTrue(dateTimeZone0.isFixed());
      assertEquals("+00:04", dateTimeZone0.getID());
      assertEquals("+00:04", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("5s}9_", "5s}9_");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("5s}9_", "5s}9_");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(6, 6, 6, false, 6, (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_CompositeAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.append((PeriodPrinter) periodFormatterBuilder_FieldFormatter1, (PeriodParser) null);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder5);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore(" is not precise in the period ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = " is not precise in the period ";
      stringArray0[1] = "in";
      stringArray0[2] = " is not precise in the period ";
      stringArray0[3] = "eriodformatterbu";
      stringArray0[4] = " is not precise in the period ";
      stringArray0[5] = " is not precise in the period ";
      stringArray0[6] = " is not precise in the period ";
      String[] stringArray1 = new String[2];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "eriodformatterbu";
      stringArray1[1] = "eriodformatterbu";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",h8THmXPO`m_f6)W");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.JulianChronology", ",h8THmXPO`m_f6)W");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(",h8THmXPO`m_f6)W", 2);
      assertEquals((-3), int0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.scan("The field must not be null", 2);
      assertEquals((-3), int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-1663));
      assertEquals(",h8THmXPO`m_f6)W", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("The field must not be null");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("Z}AR%oqMoKv%K>6%d@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("ENUM$VALUES");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = new Locale("Millis out of range: ", "Millis out of range: ");
      assertNotNull(locale0);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.append(periodFormatter1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatterBuilder4);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatterBuilder5);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatter periodFormatter2 = periodFormatterBuilder5.toFormatter();
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter1, periodFormatter2);
      assertNotNull(periodFormatter2);
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      int int2 = periodFormatterBuilder_PluralAffix0.scan("ENUM$VALUES", (-3));
      assertEquals(2, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder1.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertNotNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 1, 0, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Partial partial0 = new Partial(gJChronology0);
      assertNotNull(partial0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period0 = new Period(partial0, partial0, periodType0);
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period1 = period0.plusMinutes(15);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Period period2 = period1.plusHours((-23));
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
      
      int int0 = periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period2));
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals(7, periodType0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("FRA", locale0.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 0, (-4111), true, (-4111), periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Partial partial0 = new Partial(gJChronology0);
      assertNotNull(partial0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = new Period(partial0, partial0, periodType0);
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.plusMinutes(15);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period2 = period1.plusHours((-23));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      int int0 = periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "E");
      assertFalse(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal(",5+t2n^6UC");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) null, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSeparatorIfFieldsAfter(",5+t2n^6UC");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(periodFormatter1.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.append(periodFormatter1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder7);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(periodFormatter1.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendPrefix("user.timezone", "No formatter supplied");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder8);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(periodFormatter1.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder7.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder9);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertFalse(periodFormatter1.isPrinter());
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("9]x0hN", ",5+t2n^6UC");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("9]x0hN", 5);
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",h8THmXPO`m_f6)W");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.JulianChronology", ",h8THmXPO`m_f6)W");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      MockFile mockFile0 = new MockFile(",h8THmXPO`m_f6)W");
      assertNotNull(mockFile0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(",h8THmXPO`m_f6)W", mockFile0.toString());
      assertFalse(mockFile0.canWrite());
      assertEquals(",h8THmXPO`m_f6)W", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",h8THmXPO`m_f6)W", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(",h8THmXPO`m_f6)W", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      periodFormatterBuilder_CompositeAffix0.printTo((Writer) mockFileWriter0, 9);
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canExecute());
      assertEquals(",h8THmXPO`m_f6)W", mockFile0.toString());
      assertTrue(mockFile0.canWrite());
      assertEquals(",h8THmXPO`m_f6)W", mockFile0.getName());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(",h8THmXPO`m_f6)W", 2);
      assertEquals((-3), int0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.scan("The field must not be null", 2);
      assertEquals((-3), int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("ENUM$VALUES");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = new Locale("Millis out of range: ", "Millis out of range: ");
      assertNotNull(locale0);
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertNotNull(periodFormatter2);
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter2.isParser());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "Literal must not be null");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-2279), 10, (-2697), false, (-5), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_CompositeAffix0, periodFormatterBuilder_CompositeAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      StringWriter stringWriter0 = new StringWriter(10);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Literal must not be null");
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("Literal must not be null", stringWriter0.toString());
      assertEquals("Literal must not be null", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringBuffer0);
      assertEquals("Literal must not be null", stringWriter0.toString());
      assertEquals("Literal must not be null", stringWriter1.toString());
      assertEquals("Literal must not be null", stringBuffer0.toString());
      assertEquals(24, stringBuffer0.length());
      
      PeriodType periodType0 = PeriodType.months();
      assertNotNull(periodType0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      assertEquals(1, BuddhistChronology.BE);
      assertNotNull(buddhistChronology0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Literal must not be null";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Literal must not be null", "The effective range must be at least 2", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      assertNotNull(gregorianChronology0);
      assertEquals(4, gregorianChronology0.getMinimumDaysInFirstWeek());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-3498L), periodType0, (Chronology) gregorianChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(4, gregorianChronology0.getMinimumDaysInFirstWeek());
      
      Locale locale0 = new Locale("org.joda.time.format.PeriodFormatterBuilder");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.format.periodformatterbuilder", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.joda.time.format.periodformatterbuilder", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      int int0 = periodFormatterBuilder_Separator1.countFieldsToPrint(mutablePeriod0, (-3932), locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertEquals(0, int0);
      assertEquals(1, periodType0.size());
      assertEquals("Months", periodType0.getName());
      assertEquals(4, gregorianChronology0.getMinimumDaysInFirstWeek());
      assertEquals("", locale0.getVariant());
      assertEquals("org.joda.time.format.periodformatterbuilder", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("org.joda.time.format.periodformatterbuilder", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      try { 
        DateTimeZone.forOffsetHours((-3932));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Hours out of range: -3932
         //
         verifyException("org.joda.time.DateTimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 0, 0, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      Partial partial0 = new Partial(gJChronology0);
      assertNotNull(partial0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      assertNotNull(periodType0);
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period0 = new Period(partial0, partial0, periodType0);
      assertNotNull(period0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Period period1 = period0.plusMinutes(26);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      boolean boolean0 = partial0.equals(periodFormatterBuilder_RegExAffix0);
      assertFalse(boolean0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      
      Period period2 = period1.plusHours((-23));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("Cannot have two adjacent separators", (String) null, stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, false, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      int int0 = periodFormatterBuilder_Separator0.countFieldsToPrint(period1, 0, locale0);
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period0);
      assertNotSame(period1, period2);
      assertEquals(0, int0);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period0.equals((Object)period2));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period1.equals((Object)period2));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      assertEquals(0, partial0.size());
      assertEquals("YearMonthDayTime", periodType0.getName());
      assertEquals(7, periodType0.size());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("b3<X4jJr]*Tv7\"9");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(1922);
      assertEquals(15, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("b3<X4jJr]*Tv7\"9", "bc='\"~b?XE[a");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits(2232);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsBefore("No formatter supplied");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b3<X4jJr]*Tv7\"9";
      stringArray0[1] = "b3<X4jJr]*Tv7\"9";
      stringArray0[2] = "bc='\"~b?XE[a";
      stringArray0[3] = "bc='\"~b?XE[a";
      stringArray0[4] = "bc='\"~b?XE[a";
      stringArray0[5] = "bc='\"~b?XE[a";
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 12
         // bc='\"~b?XE[a
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix(",% Gr", "6UFDj[");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(48, (-2147483645), (-2147483645), true, 48, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      PeriodType periodType0 = PeriodType.yearMonthDay();
      assertNotNull(periodType0);
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.UTC;
      assertNotNull(dateTimeZone0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      assertNotNull(gJChronology0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(2172L, (-3658L), gJChronology0);
      assertNotNull(mutablePeriod0);
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      periodFormatterBuilder_FieldFormatter1.setFieldValue(mutablePeriod0, (-2147483645), (-3219));
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("UTC", dateTimeZone0.toString());
      assertEquals("UTC", dateTimeZone0.getID());
      assertEquals(4, gJChronology0.getMinimumDaysInFirstWeek());
      
      PeriodType periodType1 = periodType0.withDaysRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoDays", periodType1.getName());
      
      DateTimeZone dateTimeZone1 = DateTimeZone.UTC;
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(dateTimeZone1);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone1);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertNotNull(iSOChronology0);
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      
      Period period0 = new Period((-1331L), periodType1, (Chronology) iSOChronology0);
      assertNotNull(period0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoDays", periodType1.getName());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
      
      boolean boolean0 = periodFormatterBuilder_FieldFormatter1.isZero(period0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(dateTimeZone1, dateTimeZone0);
      assertTrue(boolean0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("YearMonthDay", periodType0.getName());
      assertEquals(3, periodType0.size());
      assertEquals(2, periodType1.size());
      assertEquals("YearMonthDayNoDays", periodType1.getName());
      assertEquals("UTC", dateTimeZone1.getID());
      assertEquals("UTC", dateTimeZone1.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("w");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w";
      stringArray0[1] = "w";
      stringArray0[2] = "w";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSeparator("9]x0hN", "w", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "TK-`L~Hxch");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix("org.joda.time.Period");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "org.joda.time.Period";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      int int0 = periodFormatterBuilder_RegExAffix0.parse("org.joda.time.Period", 2);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Nm5Hqyv7z";
      stringArray0[2] = "Literal must not be null";
      stringArray0[3] = "";
      stringArray0[4] = "pT4;a}!UP<>y;'b(b";
      stringArray0[5] = "] evqs4>0+[yMB'&";
      stringArray0[6] = "Fb]h!1c>:f}I7";
      stringArray0[7] = "5r0Q#/-|";
      stringArray0[8] = " instant is ";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("o>P{", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      periodFormatterBuilder4.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix(" at ");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendLiteral("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = linkedList0.add((Object) linkedList0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("M;@[[!]w`xd8Kv'");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      boolean boolean1 = periodFormatterBuilder_SimpleAffix0.matchesOtherAffix((-177), "aV'oPL", 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add(object0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(2, linkedList0.size());
      
      MockJapaneseDate mockJapaneseDate0 = new MockJapaneseDate();
      assertNotNull(mockJapaneseDate0);
      
      boolean boolean3 = linkedList0.add((Object) mockJapaneseDate0);
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(3, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3, Size: 3
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("w");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder1.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "w";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder1.maximumParsedDigits((-11));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      stringArray0[1] = "w";
      stringArray0[2] = "w";
      stringArray0[3] = "w";
      stringArray0[4] = "w";
      stringArray0[5] = "w";
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.appendSuffix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength((-11));
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        MutablePeriod.parse("8U*a/)D");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"8U*a/)D\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.append((PeriodPrinter) periodFormatterBuilder_Composite0, (PeriodParser) periodFormatterBuilder_Composite0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("org.joda.time.format.DateTimeFormat$StyleFormatter", "org.joda.time.format.DateTimeFormat$StyleFormatter");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("4sw9p<93$u]So_~");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.scan("FF-", 324);
      assertEquals((-325), int0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 1555);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendPrefix((String[]) null, (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.Interval");
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) "org.joda.time.Interval";
      objectArray0[1] = (Object) "org.joda.time.Interval";
      objectArray0[2] = (Object) mockPrintWriter0;
      objectArray0[3] = (Object) "org.joda.time.Interval";
      objectArray0[4] = (Object) linkedList0;
      objectArray0[5] = (Object) "zp~";
      objectArray0[6] = (Object) "zp~";
      PrintWriter printWriter0 = mockPrintWriter0.format("zp~", objectArray0);
      assertSame(mockPrintWriter0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
      assertNotNull(printWriter0);
      
      Period period0 = new Period(2431L);
      assertNotNull(period0);
      
      Period period1 = period0.minusMillis((-214));
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      
      Period period2 = period1.multipliedBy((-214));
      assertNotSame(period0, period1);
      assertNotSame(period0, period2);
      assertNotSame(period1, period2);
      assertNotSame(period1, period0);
      assertNotSame(period2, period0);
      assertNotSame(period2, period1);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertFalse(period2.equals((Object)period1));
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo((Writer) printWriter0, (ReadablePeriod) period2, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "ReadablePartial objects must not be null");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_PluralAffix0.scan((String) null, 530);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$PluralAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Builder has created neither a printer nor a parser";
      stringArray0[1] = null;
      stringArray0[2] = "Builder has created neither a printer nor a parser";
      stringArray0[3] = "Builder has created neither a printer nor a parser";
      stringArray0[4] = null;
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparator((String) null, "Builder has created neither a printer nor a parser", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("`w(kG(0}8q:}^xJFA", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendPrefix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("Builder has created neithr a printer nor a parser");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix("Builder has created neithr a printer nor a parser", "[Y]owTe>oR");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",h8THmXPO`m_f6)W");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.JulianChronology", ",h8THmXPO`m_f6)W");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(",h8THmXPO`m_f6)W", 2);
      assertEquals((-3), int0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.scan("The field must not be null", 2);
      assertEquals((-3), int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("The field must not be null");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("Z}AR%oqMoKv%K>6%d@");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("ENUM$VALUES");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = new Locale("Millis out of range: ", "Millis out of range: ");
      assertNotNull(locale0);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertNotNull(periodType0);
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertNotNull(periodFormatter2);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.append(periodFormatter2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter0);
      assertSame(periodFormatter2, periodFormatter1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder5);
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      
      PeriodFormatter periodFormatter3 = periodFormatterBuilder5.toFormatter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatter0, periodFormatter1);
      assertNotSame(periodFormatter0, periodFormatter3);
      assertSame(periodFormatter0, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter2);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotSame(periodFormatter1, periodFormatter3);
      assertSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormatter2, periodFormatter3);
      assertSame(periodFormatter2, periodFormatter1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotSame(periodFormatter3, periodFormatter2);
      assertNotSame(periodFormatter3, periodFormatter0);
      assertNotSame(periodFormatter3, periodFormatter1);
      assertNotNull(periodFormatter3);
      assertFalse(periodFormatter3.equals((Object)periodFormatter2));
      assertFalse(periodFormatter3.equals((Object)periodFormatter0));
      assertFalse(periodFormatter3.equals((Object)periodFormatter1));
      assertEquals("millis out of range: ", locale0.getLanguage());
      assertEquals("millis out of range: _MILLIS OUT OF RANGE: ", locale0.toString());
      assertEquals("MILLIS OUT OF RANGE: ", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(7, periodType0.size());
      assertEquals("YearWeekDayTime", periodType0.getName());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      assertTrue(periodFormatter2.isParser());
      assertTrue(periodFormatter2.isPrinter());
      assertTrue(periodFormatter3.isParser());
      assertTrue(periodFormatter3.isPrinter());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Object) "");
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Spliterator<Object> spliterator0 = linkedList0.spliterator();
      assertNotNull(spliterator0);
      assertEquals(1, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = null;
      try {
        periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.append((PeriodFormatter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No formatter supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("AHX5t$<fI/n");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("No printer or parser supplied");
      assertNotNull(mockFileWriter0);
      
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      assertNotNull(bufferedWriter0);
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      
      PeriodType periodType1 = periodType0.withMillisRemoved();
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMillis", periodType1.getName());
      assertEquals(7, periodType1.size());
      
      Period period0 = new Period(2551440384L, 604800L, periodType1);
      assertNotNull(period0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMillis", periodType1.getName());
      assertEquals(7, periodType1.size());
      
      Period period1 = period0.minusMonths(0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertNotNull(period1);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMillis", periodType1.getName());
      assertEquals(7, periodType1.size());
      
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      assertNotNull(durationFieldType0);
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      boolean boolean0 = period1.isSupported(durationFieldType0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertFalse(boolean0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMillis", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertEquals("halfdays", durationFieldType0.getName());
      assertEquals("halfdays", durationFieldType0.toString());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      periodFormatterBuilder_Literal0.printTo((Writer) bufferedWriter0, (ReadablePeriod) period1, locale0);
      assertNotSame(periodType0, periodType1);
      assertNotSame(periodType1, periodType0);
      assertSame(period0, period1);
      assertSame(period1, period0);
      assertFalse(periodType0.equals((Object)periodType1));
      assertFalse(periodType1.equals((Object)periodType0));
      assertEquals("Standard", periodType0.getName());
      assertEquals(8, periodType0.size());
      assertEquals("StandardNoMillis", periodType1.getName());
      assertEquals(7, periodType1.size());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("\uFFFD");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(2553L);
      assertNotNull(mutablePeriod0);
      
      Period period0 = mutablePeriod0.toPeriod();
      assertNotNull(period0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Literal0.printTo((Writer) null, (ReadablePeriod) period0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Literal", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("LenientChronology[", false);
      assertNotNull(mockFileWriter0);
      
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 0);
      periodFormatterBuilder_PluralAffix0.printTo((Writer) mockFileWriter0, 5);
      boolean boolean0 = periodFormatterBuilder_PluralAffix0.matchesOtherAffix(44, (String) null, 44);
      assertFalse(boolean0);
      
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(5, 5, 0, true, 5, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      DateTime dateTime1 = dateTime0.plusHours(44);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotNull(dateTime1);
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      
      StringBuffer stringBuffer0 = new StringBuffer(5);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, 89);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      DateTime dateTime2 = dateTime1.minusHours((-268));
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertNotNull(dateTime2);
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      assertEquals(1393532481320L, dateTime2.getMillis());
      
      Duration duration0 = new Duration(dateTime1, dateTime2);
      assertNotNull(duration0);
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      assertEquals(1393532481320L, dateTime2.getMillis());
      assertEquals(964800L, duration0.getStandardSeconds());
      assertEquals(268L, duration0.getStandardHours());
      assertEquals(16080L, duration0.getStandardMinutes());
      assertEquals(11L, duration0.getStandardDays());
      assertEquals(964800000L, duration0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime2, duration0);
      assertNotNull(mutablePeriod0);
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      assertEquals(1393532481320L, dateTime2.getMillis());
      assertEquals(964800L, duration0.getStandardSeconds());
      assertEquals(268L, duration0.getStandardHours());
      assertEquals(16080L, duration0.getStandardMinutes());
      assertEquals(11L, duration0.getStandardDays());
      assertEquals(964800000L, duration0.getMillis());
      
      int int0 = mutablePeriod0.size();
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(8, int0);
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      assertEquals(1393532481320L, dateTime2.getMillis());
      assertEquals(964800L, duration0.getStandardSeconds());
      assertEquals(268L, duration0.getStandardHours());
      assertEquals(16080L, duration0.getStandardMinutes());
      assertEquals(11L, duration0.getStandardDays());
      assertEquals(964800000L, duration0.getMillis());
      
      periodFormatterBuilder_FieldFormatter1.setFieldValue(mutablePeriod0, (-3389), 189);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      assertEquals(1393532481320L, dateTime2.getMillis());
      assertEquals(964800L, duration0.getStandardSeconds());
      assertEquals(268L, duration0.getStandardHours());
      assertEquals(16080L, duration0.getStandardMinutes());
      assertEquals(11L, duration0.getStandardDays());
      assertEquals(964800000L, duration0.getMillis());
      
      long long0 = periodFormatterBuilder_FieldFormatter1.getFieldValue(mutablePeriod0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertNotSame(dateTime0, dateTime2);
      assertNotSame(dateTime0, dateTime1);
      assertNotSame(dateTime1, dateTime0);
      assertNotSame(dateTime1, dateTime2);
      assertNotSame(dateTime2, dateTime1);
      assertNotSame(dateTime2, dateTime0);
      assertEquals(9223372036854775807L, long0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertFalse(dateTime0.equals((Object)dateTime2));
      assertFalse(dateTime0.equals((Object)dateTime1));
      assertFalse(dateTime1.equals((Object)dateTime0));
      assertFalse(dateTime1.equals((Object)dateTime2));
      assertFalse(dateTime2.equals((Object)dateTime1));
      assertFalse(dateTime2.equals((Object)dateTime0));
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392567681320L, dateTime1.getMillis());
      assertEquals(1393532481320L, dateTime2.getMillis());
      assertEquals(964800L, duration0.getStandardSeconds());
      assertEquals(268L, duration0.getStandardHours());
      assertEquals(16080L, duration0.getStandardMinutes());
      assertEquals(11L, duration0.getStandardDays());
      assertEquals(964800000L, duration0.getMillis());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      StringBuffer stringBuffer1 = new StringBuffer((CharSequence) "LenientChronology[");
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("LenientChronology[", stringBuffer1.toString());
      assertEquals(18, stringBuffer1.length());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer1, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.minimumPrintedDigits(888);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("t(C^+", "yOf F\"=?R6G$");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      periodFormatterBuilder4.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "t(C^+";
      stringArray0[1] = "t(C^+";
      stringArray0[2] = "t(C^+";
      stringArray0[3] = "t(C^+";
      stringArray0[4] = "yOf F\"=?R6G$";
      stringArray0[5] = "t(C^+";
      stringArray0[6] = "t(C^+";
      stringArray0[7] = "yOf F\"=?R6G$";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("yOf F\"=?R6G$", "t(C^+", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, false, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      StringBuffer stringBuffer0 = new StringBuffer(888);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Duration duration0 = new Duration(0L);
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      
      Hours hours0 = duration0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Locale locale0 = new Locale("t(C^+", ".", "8NSsbcMLn .&N6Oy");
      assertNotNull(locale0);
      assertEquals("t(c^+_._8NSsbcMLn .&N6Oy", locale0.toString());
      assertEquals("t(c^+", locale0.getLanguage());
      assertEquals(".", locale0.getCountry());
      assertEquals("8NSsbcMLn .&N6Oy", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("t(c^+_._8NSsbcMLn .&N6Oy", locale0.toString());
      assertEquals("t(c^+", locale0.getLanguage());
      assertEquals(".", locale0.getCountry());
      assertEquals("8NSsbcMLn .&N6Oy", locale0.getVariant());
      assertEquals("8NSsbcMLn .&N6Oy", locale1.getVariant());
      assertEquals("t(c^+", locale1.getLanguage());
      assertEquals(".", locale1.getCountry());
      assertEquals("t(c^+_._8NSsbcMLn .&N6Oy", locale1.toString());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) hours0, locale1);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      assertEquals("t(c^+_._8NSsbcMLn .&N6Oy", locale0.toString());
      assertEquals("t(c^+", locale0.getLanguage());
      assertEquals(".", locale0.getCountry());
      assertEquals("8NSsbcMLn .&N6Oy", locale0.getVariant());
      assertEquals("8NSsbcMLn .&N6Oy", locale1.getVariant());
      assertEquals("t(c^+", locale1.getLanguage());
      assertEquals(".", locale1.getCountry());
      assertEquals("t(c^+_._8NSsbcMLn .&N6Oy", locale1.toString());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-230L), (-230L));
      assertNotNull(mutablePeriod0);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      Locale locale0 = Locale.forLanguageTag("");
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      Locale locale1 = locale0.stripExtensions();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      periodFormatterBuilder_Literal0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale1);
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale1.toString());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getLanguage());
      assertEquals("", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getISO3Country());
      
      Locale locale2 = Locale.GERMANY;
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertNotNull(locale2);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("DE", locale2.getCountry());
      
      int int0 = periodFormatterBuilder_Literal0.parseInto(mutablePeriod0, "", 0, locale2);
      assertNotSame(locale2, locale1);
      assertNotSame(locale2, locale0);
      assertEquals(0, int0);
      assertFalse(locale2.equals((Object)locale1));
      assertFalse(locale2.equals((Object)locale0));
      assertEquals("", locale2.getVariant());
      assertEquals("de", locale2.getLanguage());
      assertEquals("DEU", locale2.getISO3Country());
      assertEquals("de_DE", locale2.toString());
      assertEquals("deu", locale2.getISO3Language());
      assertEquals("DE", locale2.getCountry());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("+");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("ee", "ee");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("m&M9\"$;u,r6r", 656);
      assertEquals((-657), int0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator("", "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.Years", "");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertNotNull(stringArray0);
      
      String[] stringArray1 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("", "", stringArray1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "NoMillis";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "NoMillis");
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertNotNull(charArrayWriter1);
      assertEquals("NoMillis", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
      assertEquals("NoMillis", charArrayWriter1.toString());
      assertEquals(8, charArrayWriter1.size());
      
      periodFormatterBuilder_RegExAffix0.printTo((Writer) charArrayWriter0, 1515);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertEquals("NoMillisNoMillis", charArrayWriter0.toString());
      assertEquals(16, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter2 = charArrayWriter0.append('l');
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertNotNull(charArrayWriter2);
      assertEquals(17, charArrayWriter0.size());
      assertEquals("NoMillisNoMillisl", charArrayWriter0.toString());
      assertEquals(17, charArrayWriter2.size());
      assertEquals("NoMillisNoMillisl", charArrayWriter2.toString());
      
      charArrayWriter2.write("NoMillis");
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals(25, charArrayWriter0.size());
      assertEquals("NoMillisNoMillislNoMillis", charArrayWriter0.toString());
      assertEquals("NoMillisNoMillislNoMillis", charArrayWriter2.toString());
      assertEquals(25, charArrayWriter2.size());
      
      periodFormatterBuilder_RegExAffix0.printTo((Writer) charArrayWriter2, 412);
      assertSame(charArrayWriter0, charArrayWriter2);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter1);
      assertSame(charArrayWriter2, charArrayWriter0);
      assertEquals(33, charArrayWriter0.size());
      assertEquals("NoMillisNoMillislNoMillisNoMillis", charArrayWriter0.toString());
      assertEquals(33, charArrayWriter2.size());
      assertEquals("NoMillisNoMillislNoMillisNoMillis", charArrayWriter2.toString());
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = linkedList0.pollFirst();
      assertNull(object1);
      assertEquals(0, linkedList0.size());
      
      PeriodType periodType0 = PeriodType.yearWeekDay();
      assertNotNull(periodType0);
      assertEquals(3, periodType0.size());
      assertEquals("YearWeekDay", periodType0.getName());
      
      MutablePeriod mutablePeriod0 = null;
      try {
        mutablePeriod0 = new MutablePeriod(object0, periodType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No period converter found for type: java.lang.Object
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits((-1525));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "g@";
      stringArray0[1] = "g@";
      stringArray0[2] = "g@";
      stringArray0[3] = "g@";
      stringArray0[4] = "g@";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("g@", "g@", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendPrefix("YH$wSH");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix("YH$wSH", "jvnK',*FETR|");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder6);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "YH$wSH";
      stringArray1[1] = "jvnK',*FETR|";
      stringArray1[2] = "YH$wSH";
      stringArray1[3] = "g@";
      String[] stringArray2 = new String[8];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "g@";
      stringArray2[1] = "g@";
      stringArray2[2] = "jvnK',*FETR|";
      stringArray2[3] = "YH$wSH";
      stringArray2[4] = "jvnK',*FETR|";
      stringArray2[5] = "YH$wSH";
      stringArray2[6] = "jvnK',*FETR|";
      stringArray2[7] = "jvnK',*FETR|";
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.appendSuffix(stringArray1, stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("s", "s");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "3?YA@Si,#bD2";
      stringArray0[1] = "s";
      stringArray0[2] = "s";
      stringArray0[3] = "K-MG*Zz~EJ *!I";
      stringArray0[4] = "s";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "s";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendPrefix((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("Cannot parse \"");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.maximumParsedDigits((-3283));
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSuffix("Cannot parse \"", "Ou");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder3.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder8.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("Cannot parse \"");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("B)sL- ?B!{;M7", 420);
      assertEquals((-421), int0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "PeriodFormat.months.regex";
      stringArray0[2] = "";
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("PeriodFormat.months.regex");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1143, 41, 3119, false, (-1138), (PeriodFormatterBuilder.FieldFormatter[]) null, periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter0);
      
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter1 = new PeriodFormatterBuilder.FieldFormatter(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_FieldFormatter1);
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter1, true, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(724L, 724L);
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = Locale.ENGLISH;
      assertNotNull(locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, "PeriodFormat.months.regex", (-127), locale0);
      assertNotSame(periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter1);
      assertNotSame(periodFormatterBuilder_FieldFormatter1, periodFormatterBuilder_FieldFormatter0);
      assertEquals((-127), int0);
      assertFalse(periodFormatterBuilder_FieldFormatter0.equals((Object)periodFormatterBuilder_FieldFormatter1));
      assertFalse(periodFormatterBuilder_FieldFormatter1.equals((Object)periodFormatterBuilder_FieldFormatter0));
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Prefix not followed by field", "D");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_CompositeAffix0.getAffixes();
      assertNotNull(stringArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "iJ";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray1 = new String[5];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "W<b;zsO1  3s;r7";
      stringArray1[1] = "iJ";
      stringArray1[2] = "";
      stringArray1[3] = "iJ";
      stringArray1[4] = "iJ";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendPrefix(stringArray0, stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(",% Gr", ",% Gr", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("o>P{", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      periodFormatterBuilder4.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendLiteral("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.appendPrefix("o>P{");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder8);
      
      PeriodFormatterBuilder periodFormatterBuilder9 = periodFormatterBuilder3.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder9, periodFormatterBuilder8);
      assertNotNull(periodFormatterBuilder9);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("o>P{", "o>P{");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      int int0 = periodFormatterBuilder_PluralAffix0.scan("", (-147));
      assertEquals(146, int0);
      
      PeriodFormatterBuilder periodFormatterBuilder10 = periodFormatterBuilder1.appendSeparatorIfFieldsAfter("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder10, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder10);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-147));
      assertEquals("o>P{", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      
      PeriodFormatterBuilder periodFormatterBuilder11 = periodFormatterBuilder1.minimumPrintedDigits((-147));
      assertSame(periodFormatterBuilder11, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder11, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder11);
      
      PeriodFormatterBuilder periodFormatterBuilder12 = periodFormatterBuilder8.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder12, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder12);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder9);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder11);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder10);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder12);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("t");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSeparator("No field to apply suffix to", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("YearMonthDay");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix("#jH<\t");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      periodFormatterBuilder5.clear();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("PeriodFormat.days");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(0);
      assertEquals(17, int0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      periodFormatterBuilder_SimpleAffix0.printTo(stringBuffer0, 0);
      assertEquals("PeriodFormat.days", stringWriter0.toString());
      assertEquals("PeriodFormat.days", stringBuffer0.toString());
      assertEquals(17, stringBuffer0.length());
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.scan("", (-415));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder5.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "TK-`L~Hxch");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeconds();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendPrefix("TK-`L~Hxch", "No field to apply suffix to");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder5.appendPrefix("org.joda.time.Period");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertNotNull(periodFormatterBuilder7);
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder5.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertNotNull(periodFormatterBuilder8);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_SimpleAffix0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add(periodFormatterBuilder_SimpleAffix0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      String[] stringArray1 = periodFormatterBuilder_RegExAffix0.getAffixes();
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendLiteral((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Literal must not be null
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("hmV");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "[P7_kaEF#";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 8
         // [P7_kaEF#
         //         ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMonths();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "|[6-%";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal character range near index 4
         // |[6-%
         //     ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.rejectSignedValues(true);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSuffix("Cannot have two adjacent separators", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSecondsWithOptionalMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.maximumParsedDigits(0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder7);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      assertNotNull(dateTimeZone0);
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder6.appendPrefix("org/joda/time/tz/data");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder8);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder8, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder8);
      
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      assertNotNull(localDate0);
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1867L);
      assertNotNull(localTime0);
      assertEquals(4, localTime0.size());
      
      DateTime dateTime0 = localDate0.toDateTime(localTime0);
      assertNotNull(dateTime0);
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals(1392354001867L, dateTime0.getMillis());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0);
      assertNotNull(mutablePeriod0);
      assertEquals("America/Toronto", dateTimeZone0.getID());
      assertEquals("America/Toronto", dateTimeZone0.toString());
      assertEquals(3, localDate0.size());
      assertEquals(4, localTime0.size());
      assertEquals(1392354001867L, dateTime0.getMillis());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.countFieldsToPrint(mutablePeriod0, 0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod(46, 1543, 46, 99, 1543, (-3693), (-3693), 99);
      assertNotNull(mutablePeriod0);
      
      Locale locale0 = new Locale("", "", "");
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.printTo(stringBuffer0, (ReadablePeriod) mutablePeriod0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      PeriodType periodType0 = PeriodType.seconds();
      assertNotNull(periodType0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      Period period0 = new Period((-329L), periodType0);
      assertNotNull(period0);
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0, (Locale) null, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals(0, linkedList0.size());
      assertEquals("Seconds", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        MutablePeriod.parse("org.joda.time.Minutes", periodFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.rejectSignedValues(false);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder0.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder2.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparatorIfFieldsAfter((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = stringWriter0.append('N');
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("N", stringWriter0.toString());
      assertEquals("N", stringWriter1.toString());
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertSame(stringWriter0, stringWriter1);
      assertNotNull(stringBuffer0);
      assertEquals("N", stringWriter0.toString());
      assertEquals("N", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      int int0 = periodFormatterBuilder_RegExAffix0.scan("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", 918);
      assertEquals((-919), int0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("The offset cannot be zero");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_CompositeAffix0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = periodFormatterBuilder_CompositeAffix0.matchesOtherAffix(0, "The offset cannot be zero", 0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Literal must not be null", "The offset cannot be zero");
      assertNotNull(periodFormatterBuilder_PluralAffix0);
      
      String[] stringArray0 = periodFormatterBuilder_PluralAffix0.getAffixes();
      assertNotNull(stringArray0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMinutes();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder0.appendMillis3Digit();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder6);
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.printZeroAlways();
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder7);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("ZG&_ygku'(cOfHL@3s");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add(periodFormatterBuilder_SimpleAffix0);
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean1 = linkedHashSet0.add(periodFormatterBuilder_SimpleAffix0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet1 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet1);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet1);
      assertNotSame(linkedHashSet1, linkedHashSet0);
      assertFalse(linkedHashSet1.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet2 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      assertNotNull(linkedHashSet2);
      assertTrue(linkedHashSet2.equals((Object)linkedHashSet1));
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet0));
      assertTrue(linkedHashSet2.isEmpty());
      assertEquals(0, linkedHashSet2.size());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix1 = new PeriodFormatterBuilder.SimpleAffix("'Q*");
      assertNotNull(periodFormatterBuilder_SimpleAffix1);
      assertFalse(periodFormatterBuilder_SimpleAffix1.equals((Object)periodFormatterBuilder_SimpleAffix0));
      
      boolean boolean2 = linkedHashSet2.add(periodFormatterBuilder_SimpleAffix1);
      assertNotSame(linkedHashSet2, linkedHashSet1);
      assertNotSame(linkedHashSet2, linkedHashSet0);
      assertNotSame(periodFormatterBuilder_SimpleAffix1, periodFormatterBuilder_SimpleAffix0);
      assertTrue(boolean2);
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet1));
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet0));
      assertFalse(periodFormatterBuilder_SimpleAffix1.equals((Object)periodFormatterBuilder_SimpleAffix0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, linkedHashSet2.size());
      assertFalse(linkedHashSet2.isEmpty());
      
      periodFormatterBuilder_SimpleAffix0.finish(linkedHashSet2);
      assertNotSame(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix1);
      assertNotSame(linkedHashSet2, linkedHashSet1);
      assertNotSame(linkedHashSet2, linkedHashSet0);
      assertFalse(periodFormatterBuilder_SimpleAffix0.equals((Object)periodFormatterBuilder_SimpleAffix1));
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet1));
      assertFalse(linkedHashSet2.equals((Object)linkedHashSet0));
      assertEquals(1, linkedHashSet2.size());
      assertFalse(linkedHashSet2.isEmpty());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_SimpleAffix0.printTo((StringBuffer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$SimpleAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("ly)<+^K[?H");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.parse("ly)<+^K[?H", (-2186));
      assertEquals(2185, int0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer(2185);
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, 1715);
      assertEquals("ly)<+^K[?Hly)<+^K[?H", stringBuffer0.toString());
      assertEquals(20, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodPrinter periodPrinter0 = periodFormatterBuilder0.toPrinter();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertNotNull(periodPrinter0);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparatorIfFieldsBefore("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Etc/");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("IvL<", "IvL<", (String[]) null, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      
      PeriodType periodType0 = PeriodType.time();
      assertNotNull(periodType0);
      assertEquals(4, periodType0.size());
      assertEquals("Time", periodType0.getName());
      
      PeriodType periodType1 = PeriodType.time();
      assertSame(periodType1, periodType0);
      assertNotNull(periodType1);
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      
      PeriodType periodType2 = periodType1.withSecondsRemoved();
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertNotNull(periodType2);
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertEquals("TimeNoSeconds", periodType2.getName());
      assertEquals(3, periodType2.size());
      
      MutablePeriod mutablePeriod0 = new MutablePeriod((-272L), (-272L), periodType2);
      assertNotNull(mutablePeriod0);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertEquals("TimeNoSeconds", periodType2.getName());
      assertEquals(3, periodType2.size());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      int int0 = periodFormatterBuilder_Separator1.calculatePrintedLength(mutablePeriod0, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertSame(periodType1, periodType0);
      assertNotSame(periodType1, periodType2);
      assertNotSame(periodType2, periodType1);
      assertNotSame(periodType2, periodType0);
      assertEquals(8, int0);
      assertFalse(periodType1.equals((Object)periodType2));
      assertFalse(periodType2.equals((Object)periodType1));
      assertFalse(periodType2.equals((Object)periodType0));
      assertEquals("Time", periodType1.getName());
      assertEquals(4, periodType1.size());
      assertEquals("TimeNoSeconds", periodType2.getName());
      assertEquals(3, periodType2.size());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSeparatorIfFieldsBefore((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator("minutes");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendWeeks();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparatorIfFieldsBefore("$kg[95\"NT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "No printer or parser supplied";
      stringArray0[1] = "";
      stringArray0[2] = "^UE/r:@>'<6";
      stringArray0[3] = "No field to apply suffix to";
      stringArray0[4] = "";
      stringArray0[5] = "Builder has created neither a printer nor a parser";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      assertNotNull(periodFormatterBuilder_RegExAffix0);
      
      StringBuffer stringBuffer0 = new StringBuffer("4QQgc`u:{&7!UP0n");
      assertNotNull(stringBuffer0);
      assertEquals("4QQgc`u:{&7!UP0n", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      
      periodFormatterBuilder_RegExAffix0.printTo(stringBuffer0, 0);
      assertEquals(66, stringBuffer0.length());
      assertEquals("4QQgc`u:{&7!UP0nBuilder has created neither a printer nor a parser", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w~;AfMm2\"v{D?Qd";
      stringArray0[1] = "w~;AfMm2\"v{D?Qd";
      stringArray0[2] = "m";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("w~;AfMm2\"v{D?Qd");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      PeriodType periodType0 = PeriodType.days();
      assertNotNull(periodType0);
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("w~;AfMm2\"v{D?Qd", "m", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, true, true);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      MutablePeriod mutablePeriod0 = periodFormatter0.parseMutablePeriod("w~;AfMm2\"v{D?Qd");
      assertNotNull(mutablePeriod0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      int int0 = periodFormatterBuilder_Separator0.parseInto(mutablePeriod0, ";}c5@u0", 1, locale0);
      assertEquals((-2), int0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("Days", periodType0.getName());
      assertEquals(1, periodType0.size());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("Builder has created neithr a printer nor a parser");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.appendSeparator("[Y]owTe>oR", "Builder has created neithr a printer nor a parser");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator(",% Gr");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator(",% Gr", ";t;?4s{#i#%E2c!6a", stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot have two adjacent separators
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal((String) null);
      assertNotNull(periodFormatterBuilder_Literal0);
      
      boolean boolean0 = linkedList0.add((Object) periodFormatterBuilder_Literal0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      int int0 = periodFormatterBuilder_SimpleAffix0.calculatePrintedLength((-489));
      assertEquals(0, int0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.parse("", 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("", "}z[2Q.YTb|");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("Cs");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Period period0 = Period.hours((-1837));
      assertNotNull(period0);
      
      int int0 = period0.size();
      assertEquals(8, int0);
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      int int1 = periodFormatterBuilder_Literal0.countFieldsToPrint(period0, (-1694), locale0);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      MockFile mockFile0 = new MockFile("Cs");
      assertNotNull(mockFile0);
      assertEquals("Cs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("Cs", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.exists());
      assertFalse(mockFile0.canRead());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertNull(mockFile0.getParent());
      assertFalse(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.canWrite());
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      assertEquals("Cs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("Cs", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals("Cs", mockFile0.getName());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("Cs", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      
      dataOutputStream0.writeLong(1924L);
      assertEquals("Cs", mockFile0.getName());
      assertEquals(8L, mockFile0.length());
      assertTrue(mockFile0.isFile());
      assertFalse(mockFile0.isHidden());
      assertEquals("Cs", mockFile0.toString());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isAbsolute());
      
      // Undeclared exception!
      try { 
        Charset.forName("kq<i,>ZdN*T*^S(");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // kq<i,>ZdN*T*^S(
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSeparator("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertNotNull(periodFormatterBuilder4);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendSeparatorIfFieldsAfter("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroNever();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendYears();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyLast();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder3);
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("y=XpN\bkx");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      
      PeriodType periodType0 = PeriodType.standard();
      assertNotNull(periodType0);
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal0, locale0, periodType0);
      assertNotNull(periodFormatter0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      PeriodFormatter periodFormatter1 = periodFormatter0.withParseType(periodType0);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertNotNull(periodFormatter1);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter1);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder3.append((PeriodPrinter) null, (PeriodParser) periodFormat_DynamicWordBased0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatter0, periodFormatter1);
      assertSame(periodFormatter1, periodFormatter0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertNotNull(periodFormatterBuilder5);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals(8, periodType0.size());
      assertEquals("Standard", periodType0.getName());
      assertFalse(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      assertFalse(periodFormatter1.isPrinter());
      assertTrue(periodFormatter1.isParser());
      
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal1 = new PeriodFormatterBuilder.Literal("y=XpN\bkx");
      assertNotNull(periodFormatterBuilder_Literal1);
      assertFalse(periodFormatterBuilder_Literal1.equals((Object)periodFormatterBuilder_Literal0));
      
      PeriodFormatter periodFormatter2 = new PeriodFormatter((PeriodPrinter) null, periodFormatterBuilder_Literal1);
      assertNotNull(periodFormatter2);
      assertFalse(periodFormatterBuilder_Literal1.equals((Object)periodFormatterBuilder_Literal0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter2.isPrinter());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased1 = new PeriodFormat.DynamicWordBased(periodFormatter2);
      assertNotNull(periodFormat_DynamicWordBased1);
      assertFalse(periodFormatterBuilder_Literal1.equals((Object)periodFormatterBuilder_Literal0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormat_DynamicWordBased1.equals((Object)periodFormat_DynamicWordBased0));
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter2.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder3.append((PeriodPrinter) periodFormat_DynamicWordBased1, (PeriodParser) periodFormat_DynamicWordBased1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormat_DynamicWordBased1, periodFormat_DynamicWordBased0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder6);
      assertFalse(periodFormatterBuilder_Literal1.equals((Object)periodFormatterBuilder_Literal0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormat_DynamicWordBased1.equals((Object)periodFormat_DynamicWordBased0));
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter2.isPrinter());
      
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendPrefix("y=XpN\bkx", "y=XpN\bkx");
      assertSame(periodFormatterBuilder7, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder7, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder6);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder6);
      assertNotSame(periodFormatterBuilder_Literal1, periodFormatterBuilder_Literal0);
      assertNotSame(periodFormatter2, periodFormatter1);
      assertNotSame(periodFormatter2, periodFormatter0);
      assertNotSame(periodFormat_DynamicWordBased1, periodFormat_DynamicWordBased0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder7);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder6, periodFormatterBuilder5);
      assertNotNull(periodFormatterBuilder7);
      assertFalse(periodFormatterBuilder_Literal1.equals((Object)periodFormatterBuilder_Literal0));
      assertFalse(periodFormatter2.equals((Object)periodFormatter1));
      assertFalse(periodFormatter2.equals((Object)periodFormatter0));
      assertFalse(periodFormat_DynamicWordBased1.equals((Object)periodFormat_DynamicWordBased0));
      assertTrue(periodFormatter2.isParser());
      assertFalse(periodFormatter2.isPrinter());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMillis();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "4<*ax";
      stringArray0[1] = "4<*ax";
      stringArray0[2] = "4<*ax";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparator("4<*ax", "4<*ax", stringArray0);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertNotNull(periodFormatterBuilder4);
      
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendDays();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder5);
      assertSame(periodFormatterBuilder4, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder4);
      assertSame(periodFormatterBuilder5, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder5);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.append((PeriodPrinter) null, (PeriodParser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No printer or parser supplied
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendLiteral("%e{da#GbPeO_,t");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendPrefix("?!J)FabEI2.>i`hg<", "A\"DKbWL]|,wg");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertNotNull(periodFormatterBuilder2);
      
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder3);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder3, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder3);
      
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      assertNotNull(periodFormatter0);
      assertEquals(0, linkedList0.size());
      assertTrue(periodFormatter0.isPrinter());
      assertTrue(periodFormatter0.isParser());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder3.append(periodFormatter0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Prefix not followed by field
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "A";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = "A";
      stringArray0[4] = null;
      stringArray0[5] = null;
      stringArray0[6] = "A";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = null;
      try {
        periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("A", (String) null, stringArray0, (PeriodPrinter) null, periodFormatterBuilder_Literal0, true, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      assertNotNull(periodFormatterBuilder0);
      
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendHours();
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder1);
      
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("", "");
      assertSame(periodFormatterBuilder0, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder0, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder0);
      assertSame(periodFormatterBuilder1, periodFormatterBuilder2);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder1);
      assertSame(periodFormatterBuilder2, periodFormatterBuilder0);
      assertNotNull(periodFormatterBuilder2);
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder2.appendSeparator((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      assertNotNull(periodFormatterBuilder_Composite0);
      assertEquals(0, linkedList0.size());
      
      MockDate mockDate0 = new MockDate(45, 0, 45, 45, (-713), 1968);
      assertNotNull(mockDate0);
      assertEquals("Thu Feb 15 09:39:48 GMT 1945", mockDate0.toString());
      
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(monthDay0);
      assertEquals("Thu Feb 15 09:39:48 GMT 1945", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      Period period0 = Period.fieldDifference(monthDay0, monthDay0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(period0);
      assertEquals("Thu Feb 15 09:39:48 GMT 1945", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      Period period1 = period0.plusDays(100);
      assertNotSame(period0, period1);
      assertNotSame(period1, period0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(period1);
      assertFalse(period1.equals((Object)period0));
      assertEquals("Thu Feb 15 09:39:48 GMT 1945", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      Period period2 = period1.plusMinutes(0);
      assertNotSame(period0, period2);
      assertNotSame(period0, period1);
      assertSame(period1, period2);
      assertNotSame(period1, period0);
      assertSame(period2, period1);
      assertNotSame(period2, period0);
      assertEquals(1, MonthDay.DAY_OF_MONTH);
      assertEquals(0, MonthDay.MONTH_OF_YEAR);
      assertNotNull(period2);
      assertFalse(period0.equals((Object)period1));
      assertFalse(period1.equals((Object)period0));
      assertFalse(period2.equals((Object)period0));
      assertEquals("Thu Feb 15 09:39:48 GMT 1945", mockDate0.toString());
      assertEquals(2, monthDay0.size());
      assertEquals(15, monthDay0.getDayOfMonth());
      assertEquals(2, monthDay0.getMonthOfYear());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      // Undeclared exception!
      try { 
        periodFormatterBuilder_Composite0.calculatePrintedLength(period2, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$Composite", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(" y");
      assertNotNull(periodFormatterBuilder_SimpleAffix0);
      
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_SimpleAffix0);
      assertNotNull(periodFormatterBuilder_CompositeAffix0);
      
      int int0 = periodFormatterBuilder_CompositeAffix0.calculatePrintedLength(306);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "PeriodFormat.day";
      stringArray0[1] = "format.periodfor";
      stringArray0[2] = "format.periodfor";
      stringArray0[3] = "format.periodfor";
      stringArray0[4] = "format.periodfor";
      stringArray0[5] = "format.periodfor";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("org.joda.time.format,h8thmxpo`m_f6)wbuilder");
      assertNotNull(periodFormatterBuilder_Literal0);
      
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      assertNotNull(periodFormatter0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormat.DynamicWordBased periodFormat_DynamicWordBased0 = new PeriodFormat.DynamicWordBased(periodFormatter0);
      assertNotNull(periodFormat_DynamicWordBased0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("PeriodFormat.day", "format.periodfor", stringArray0, periodFormat_DynamicWordBased0, periodFormat_DynamicWordBased0, false, false);
      assertNotNull(periodFormatterBuilder_Separator0);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator1 = periodFormatterBuilder_Separator0.finish(periodFormat_DynamicWordBased0, periodFormatterBuilder_Literal0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotNull(periodFormatterBuilder_Separator1);
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      
      StringBuffer stringBuffer0 = new StringBuffer("L+sbDW");
      assertNotNull(stringBuffer0);
      assertEquals("L+sbDW", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      
      Period period0 = Period.millis(67);
      assertNotNull(period0);
      
      Hours hours0 = period0.toStandardHours();
      assertNotNull(hours0);
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertNotNull(durationFieldType0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      int int0 = period0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals("hours", durationFieldType0.toString());
      assertEquals("hours", durationFieldType0.getName());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      StringBuffer stringBuffer1 = new StringBuffer();
      assertNotNull(stringBuffer1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      periodFormatterBuilder_Separator0.printTo(stringBuffer1, (ReadablePeriod) hours0, locale0);
      assertNotSame(stringBuffer1, stringBuffer0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
      assertEquals("0 hours0 hours", stringBuffer1.toString());
      assertEquals(14, stringBuffer1.length());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
      
      Locale locale1 = Locale.FRENCH;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      
      periodFormatterBuilder_Separator1.printTo(stringBuffer0, (ReadablePeriod) period0, locale1);
      assertNotSame(locale1, locale0);
      assertSame(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator1);
      assertSame(periodFormatterBuilder_Separator1, periodFormatterBuilder_Separator0);
      assertNotSame(stringBuffer0, stringBuffer1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(stringBuffer0.equals((Object)stringBuffer1));
      assertEquals("", locale1.getCountry());
      assertEquals("fra", locale1.getISO3Language());
      assertEquals("fr", locale1.toString());
      assertEquals("", locale1.getVariant());
      assertEquals("fr", locale1.getLanguage());
      assertEquals("", locale1.getISO3Country());
      assertTrue(periodFormatter0.isParser());
      assertTrue(periodFormatter0.isPrinter());
      assertEquals("L+sbDW67 millisecondes67 millisecondes", stringBuffer0.toString());
      assertEquals(38, stringBuffer0.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("Prefix not followed by field", "Prefix not followed by field");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("org.joda.time.fo,h8thmxpo`m_f6)wtterbuilder", (-1));
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      periodFormatterBuilder_CompositeAffix0.parse("org.joda.time.fo,h8thmxpo`m_f6)wtterbuilder", (-1688));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      // Undeclared exception!
      try { 
        periodFormatterBuilder0.appendSuffix("|KL#Oe", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparatorIfFieldsAfter("zb@?6a^Xx;<xQi.");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendMonths();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparator("zb@?6a^Xx;<xQi.");
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendHours();
      assertSame(periodFormatterBuilder6, periodFormatterBuilder3);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",h8THmXPO`m_f6)W");
      MockFile mockFile0 = new MockFile("z,h8thmxpo`m_f6)w@");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      periodFormatterBuilder_SimpleAffix0.printTo((Writer) mockPrintWriter0, (-32));
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.JulianChronology", ",h8THmXPO`m_f6)W");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.joda.time.chrono.JulianChronology");
      periodFormatterBuilder_CompositeAffix0.scan(",h8THmXPO`m_f6)W", 2);
      periodFormatterBuilder_SimpleAffix0.scan("The field must not be null", 2);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      periodFormatterBuilder1.toParser();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("The field must not be null");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("Z}AR%oqMoKv%K>6%d@");
      periodFormatterBuilder3.appendSeconds();
      Locale locale0 = new Locale("Millis out of range: ", "Millis out of range: ");
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      assertEquals("YearWeekDayTime", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("YHzhWaue!.", "&P(oX6)-F");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stringWriter0.append((CharSequence) stringBuffer0);
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2965));
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.scan("&P(oX6)-F", (-246));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSuffix("YHzhWaue!.");
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroAlways();
      periodFormatterBuilder5.minimumPrintedDigits(1685);
      periodFormatterBuilder5.appendYears();
      periodFormatterBuilder2.appendSuffix("D");
      periodFormatterBuilder3.appendSeparator("[&TfHm=BRmon,We^]");
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder4.appendPrefix("&P(oX6)-F");
      assertSame(periodFormatterBuilder6, periodFormatterBuilder0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("YHzhWaue!", "&P(oX6)-F");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      periodFormatterBuilder_PluralAffix0.printTo(stringBuffer0, (-2965));
      stringBuffer0.trimToSize();
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.printTo(stringBuffer0, (-2965));
      periodFormatterBuilder_CompositeAffix0.scan("&P(oX6)-F", (-246));
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      periodFormatterBuilder4.minimumPrintedDigits(1685);
      periodFormatterBuilder4.appendYears();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder2.appendSuffix("D");
      periodFormatterBuilder3.appendPrefix("6ljso[T2Y*vbM");
      periodFormatterBuilder5.printZeroIfSupported();
      periodFormatterBuilder_PluralAffix0.matchesOtherAffix(168, "[&TfHm=BRmon,We^]", (-17));
      LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix> linkedHashSet0 = new LinkedHashSet<PeriodFormatterBuilder.PeriodFieldAffix>();
      periodFormatterBuilder_CompositeAffix0.finish(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String string0 = ".periodformatter";
      String string1 = " + ";
      String[] stringArray0 = new String[8];
      stringArray0[0] = " + ";
      stringArray0[1] = " + ";
      stringArray0[2] = ".periodformatter";
      stringArray0[3] = ".periodformatter";
      stringArray0[4] = ".periodformatter";
      stringArray0[5] = " + ";
      stringArray0[6] = ".periodformatter";
      stringArray0[7] = " + ";
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSeparator(".periodformatter", " + ", stringArray0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder1.appendSuffix(stringArray0, stringArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter(1469, 1469, 387, true, 8, (PeriodFormatterBuilder.FieldFormatter[]) null, (PeriodFormatterBuilder.PeriodFieldAffix) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
      StringBuffer stringBuffer0 = new StringBuffer("h");
      Period period0 = Period.hours(8);
      periodFormatterBuilder_FieldFormatter0.getFieldValue(period0);
      Hours hours0 = period0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.joda.time.format.PeriodFormatterBuilder");
      PrintWriter printWriter0 = mockPrintWriter0.format("h", (Object[]) null);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, true);
      Period period1 = Period.years(387);
      Locale locale0 = Locale.CANADA_FRENCH;
      periodFormatterBuilder_FieldFormatter0.printTo((Writer) mockPrintWriter1, (ReadablePeriod) period1, locale0);
      Hours hours1 = minutes0.toStandardHours();
      Days days0 = hours1.toStandardDays();
      Locale locale1 = Locale.CHINESE;
      periodFormatterBuilder_FieldFormatter0.printTo(stringBuffer0, (ReadablePeriod) days0, locale1);
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("h", "h");
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "~;AfMm\"v{D?Qd";
      stringArray0[1] = "No field to apply suffix to";
      stringArray0[2] = "No field to apply suffix to";
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("~;AfMm\"v{D?Qd", "No field to apply suffix to", stringArray0, periodFormatterBuilder_FieldFormatter0, periodFormatterBuilder_FieldFormatter0, true, true);
      PeriodType periodType0 = PeriodType.yearDay();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Separator0, periodFormatterBuilder_Separator0, locale0, periodType0);
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.append(periodFormatter0);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.printZeroRarelyLast();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroAlways();
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendMinutes();
      periodFormatterBuilder5.printZeroRarelyFirst();
      periodFormatterBuilder_PluralAffix0.calculatePrintedLength((-2096353082));
      PeriodFormatterBuilder periodFormatterBuilder6 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder7 = periodFormatterBuilder6.appendSeparator("h", "the datetimefield must not be null");
      PeriodFormatterBuilder periodFormatterBuilder8 = periodFormatterBuilder7.rejectSignedValues(true);
      // Undeclared exception!
      try { 
        periodFormatterBuilder8.appendSuffix(" [/Pi]az%=mH(iWEXK", "h");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No field to apply suffix to
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("b3<X4jJr]*Tv7\"9");
      periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(1922);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendPrefix("b3<X4jJr]*Tv7\"9", "bc='\"~b?XE[a");
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.minimumPrintedDigits(2232);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendSeparatorIfFieldsBefore("No formatter supplied");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b3<X4jJr]*Tv7\"9";
      stringArray0[1] = "b3<X4jJr]*Tv7\"9";
      stringArray0[2] = "bc='\"~b?XE[a";
      stringArray0[3] = "bc='\"~b?XE[a";
      stringArray0[4] = "bc='\"~b?XE[a";
      stringArray0[5] = "bc='\"~b?XE[a";
      stringArray0[6] = "bc='\"~b?XE[a";
      // Undeclared exception!
      try { 
        periodFormatterBuilder5.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 12
         // bc='\"~b?XE[a
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix("b3<X4jJr]*Tv7\"9");
      periodFormatterBuilder_SimpleAffix0.calculatePrintedLength(1922);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendSecondsWithMillis();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSecondsWithOptionalMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(15);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.appendSeparatorIfFieldsBefore("No formatter supplied");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "b3<X4jJr]*Tv7\"9";
      periodFormatterBuilder3.printZeroIfSupported();
      stringArray0[1] = "b3<X4jJr]*Tv7\"9";
      stringArray0[2] = "bc='\"~b?XE[a";
      stringArray0[3] = "bc='\"~b?XE[a";
      stringArray0[4] = "bc='\"~b?XE[a";
      stringArray0[5] = "bc='\"~b?XE[a";
      stringArray0[6] = "bc='\"~b?XE[a";
      // Undeclared exception!
      try { 
        periodFormatterBuilder4.appendPrefix(stringArray0, stringArray0);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 12
         // bc='\"~b?XE[a
         //             ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = new PeriodFormatterBuilder.Composite(linkedList0);
      String string0 = "6/y;Yr;";
      // Undeclared exception!
      try { 
        MutablePeriod.parse("6/y;Yr;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"6/y;Yr;\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("");
      PeriodFormatterBuilder.Separator periodFormatterBuilder_Separator0 = new PeriodFormatterBuilder.Separator("", "", stringArray0, periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, true, true);
      StringWriter stringWriter0 = new StringWriter(1900);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.append('7');
      Period period0 = Period.seconds(378);
      period0.minusDays(1900);
      Locale locale0 = Locale.ROOT;
      periodFormatterBuilder_Separator0.finish(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0);
      periodFormatterBuilder_Separator0.printTo((Writer) stringWriter1, (ReadablePeriod) period0, locale0);
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      int int0 = periodFormatterBuilder_RegExAffix0.parse("-U-rP2b>{K]h^U&R^\"", 378);
      assertEquals((-379), int0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      PeriodFormatterBuilder.FieldFormatter[] periodFormatterBuilder_FieldFormatterArray0 = new PeriodFormatterBuilder.FieldFormatter[0];
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((-4111), 0, 0, true, 0, periodFormatterBuilder_FieldFormatterArray0, periodFormatterBuilder_RegExAffix0, periodFormatterBuilder_RegExAffix0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      Partial partial0 = new Partial(gJChronology0);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      Period period0 = new Period(partial0, partial0, periodType0);
      Period period1 = period0.plusMinutes(26);
      Period period2 = period1.plusHours((-23));
      Locale locale0 = Locale.FRANCE;
      // Undeclared exception!
      try { 
        periodFormatterBuilder_FieldFormatter0.calculatePrintedLength(period2, locale0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$RegExAffix", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      PeriodFormatterBuilder.FieldFormatter periodFormatterBuilder_FieldFormatter0 = null;
      try {
        periodFormatterBuilder_FieldFormatter0 = new PeriodFormatterBuilder.FieldFormatter((PeriodFormatterBuilder.FieldFormatter) null, (PeriodFormatterBuilder.PeriodFieldAffix) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.PeriodFormatterBuilder$FieldFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.printZeroRarelyFirst();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendMillis();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendYears();
      periodFormatterBuilder1.printZeroIfSupported();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      periodFormatterBuilder3.append((PeriodPrinter) periodFormatterBuilder_Literal0, (PeriodParser) periodFormatterBuilder_Literal0);
      periodFormatterBuilder3.printZeroNever();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("iv$", "org.joda.time.format.PeriodFormatterBuilder");
      MockFile mockFile0 = new MockFile("org.joda.time.format.PeriodFormatterBuilder$Literal");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('H');
      periodFormatterBuilder_PluralAffix0.printTo((Writer) printWriter0, Integer.MAX_VALUE);
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      periodFormatterBuilder_CompositeAffix0.parse("h4VN", 44);
      PeriodPrinter periodPrinter0 = periodFormatterBuilder2.toPrinter();
      assertNotNull(periodPrinter0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendMillis3Digit();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.minimumPrintedDigits(0);
      periodFormatterBuilder1.printZeroRarelyFirst();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "w";
      stringArray0[1] = "org\u0000joda\u0000time\u0000field\u0000SkipUndoDateTimeField";
      stringArray0[2] = "riodformatterbui";
      periodFormatterBuilder2.appendSuffix(stringArray0, stringArray0);
      periodFormatterBuilder0.printZeroIfSupported();
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.minimumPrintedDigits(0);
      periodFormatterBuilder3.appendMonths();
      periodFormatterBuilder3.appendWeeks();
      PeriodFormatterBuilder.Composite periodFormatterBuilder_Composite0 = (PeriodFormatterBuilder.Composite)periodFormatterBuilder2.toPrinter();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "(p=28LkG";
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Composite0, periodFormatterBuilder_Composite0);
      periodFormatterBuilder4.append(periodFormatter0);
      stringArray1[1] = "PeriodFormat.second";
      periodFormatterBuilder3.appendSeparator("(p=28LkG");
      stringArray1[2] = "Invalid pattern specification";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray1[3] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = null;
      try {
        periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray1, stringArray1);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 8
         // (p=28LkG
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      PeriodFormatterBuilder.SimpleAffix periodFormatterBuilder_SimpleAffix0 = new PeriodFormatterBuilder.SimpleAffix(",h8THmXPO`m_f6)W");
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("org.joda.time.chrono.JulianChronology", ",h8THmXPO`m_f6)W");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "INSTANCE");
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_SimpleAffix0, periodFormatterBuilder_PluralAffix0);
      int int0 = periodFormatterBuilder_CompositeAffix0.scan(",h8THmXPO`m_f6)W", 2);
      assertEquals((-3), int0);
      
      int int1 = periodFormatterBuilder_SimpleAffix0.scan("The field must not be null", 2);
      assertEquals((-3), int1);
      
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.appendWeeks();
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder1.appendSuffix("The field must not be null");
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendSeparatorIfFieldsBefore("Z}AR%oqMoKv%K>6%d@");
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = new PeriodFormatterBuilder.Literal("ENUM$VALUES");
      Locale locale0 = new Locale("Millis out of range: ", "Millis out of range: ");
      PeriodType periodType0 = PeriodType.yearWeekDayTime();
      PeriodFormatter periodFormatter0 = new PeriodFormatter(periodFormatterBuilder_Literal0, periodFormatterBuilder_Literal0, locale0, periodType0);
      PeriodFormatter periodFormatter1 = periodFormatter0.withLocale(locale0);
      PeriodFormatter periodFormatter2 = periodFormatter1.withParseType(periodType0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.append(periodFormatter2);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.printZeroIfSupported();
      periodFormatterBuilder5.toFormatter();
      int int2 = periodFormatterBuilder_SimpleAffix0.parse("Z}AR%oqMoKv%K>6%d@", 1);
      assertEquals((-2), int2);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "EE";
      stringArray0[1] = "org.joda.time.field.SkipUndoDateTimeField";
      stringArray0[2] = "Invalid style character: ";
      stringArray0[3] = "The DateTimeField must not be null";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      PeriodFormatterBuilder.RegExAffix periodFormatterBuilder_RegExAffix0 = new PeriodFormatterBuilder.RegExAffix(stringArray0, stringArray0);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(1446);
      periodFormatterBuilder_RegExAffix0.calculatePrintedLength(0);
      PeriodFormatterBuilder periodFormatterBuilder0 = new PeriodFormatterBuilder();
      PeriodFormatterBuilder periodFormatterBuilder1 = periodFormatterBuilder0.maximumParsedDigits(2502);
      PeriodFormatterBuilder periodFormatterBuilder2 = periodFormatterBuilder0.rejectSignedValues(true);
      PeriodFormatterBuilder periodFormatterBuilder3 = periodFormatterBuilder2.appendPrefix(stringArray0, stringArray0);
      PeriodFormatterBuilder periodFormatterBuilder4 = periodFormatterBuilder3.printZeroRarelyLast();
      periodFormatterBuilder0.minimumPrintedDigits(0);
      PeriodFormatterBuilder periodFormatterBuilder5 = periodFormatterBuilder4.appendWeeks();
      periodFormatterBuilder5.rejectSignedValues(true);
      PeriodFormatterBuilder periodFormatterBuilder6 = periodFormatterBuilder5.appendSeconds();
      periodFormatterBuilder0.appendPrefix("D%o");
      periodFormatterBuilder6.printZeroRarelyFirst();
      PeriodFormatterBuilder.Literal periodFormatterBuilder_Literal0 = PeriodFormatterBuilder.Literal.EMPTY;
      periodFormatterBuilder5.appendHours();
      PeriodFormatterBuilder.PluralAffix periodFormatterBuilder_PluralAffix0 = new PeriodFormatterBuilder.PluralAffix("", "EE");
      periodFormatterBuilder_PluralAffix0.parse("Invalid style character: ", 0);
      periodFormatterBuilder1.appendDays();
      PeriodFormatterBuilder.CompositeAffix periodFormatterBuilder_CompositeAffix0 = new PeriodFormatterBuilder.CompositeAffix(periodFormatterBuilder_PluralAffix0, periodFormatterBuilder_PluralAffix0);
      // Undeclared exception!
      try { 
        periodFormatterBuilder_CompositeAffix0.parse("", 0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
