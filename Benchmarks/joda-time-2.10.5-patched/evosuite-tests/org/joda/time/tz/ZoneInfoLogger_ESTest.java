/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:37:26 GMT 2020
 */

package org.joda.time.tz;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.function.Supplier;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.tz.ZoneInfoLogger;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ZoneInfoLogger_ESTest extends ZoneInfoLogger_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThreadLocal<Boolean> threadLocal0 = new ThreadLocal<Boolean>();
      ZoneInfoLogger.cVerbose = threadLocal0;
      // Undeclared exception!
      try { 
        ZoneInfoLogger.verbose();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Supplier<Boolean> supplier0 = (Supplier<Boolean>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ThreadLocal<Boolean> threadLocal0 = ThreadLocal.withInitial((Supplier<? extends Boolean>) supplier0);
      ZoneInfoLogger.cVerbose = threadLocal0;
      ZoneInfoLogger.cVerbose = null;
      // Undeclared exception!
      try { 
        ZoneInfoLogger.set(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.tz.ZoneInfoLogger", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ZoneInfoLogger zoneInfoLogger0 = new ZoneInfoLogger();
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ZoneInfoLogger.set(false);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ZoneInfoLogger.verbose();
      ZoneInfoLogger.verbose();
      boolean boolean0 = ZoneInfoLogger.verbose();
      assertFalse(boolean0);
      
      ZoneInfoLogger.set(true);
      ZoneInfoLogger zoneInfoLogger0 = new ZoneInfoLogger();
      Supplier<Boolean> supplier0 = (Supplier<Boolean>) mock(Supplier.class, new ViolatedAssumptionAnswer());
      ThreadLocal<Boolean> threadLocal0 = ThreadLocal.withInitial((Supplier<? extends Boolean>) supplier0);
      Boolean boolean1 = Boolean.valueOf("|}qSAQ6*C>IhD2T{J^");
      Boolean.compare(false, true);
      threadLocal0.set(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
  }
}
