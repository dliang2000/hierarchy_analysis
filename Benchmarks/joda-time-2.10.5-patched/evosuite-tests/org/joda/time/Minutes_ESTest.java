/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:43:58 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minutes_ESTest extends Minutes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration((-1075L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.THREE.plus((-820));
      Minutes minutes2 = minutes0.multipliedBy(1);
      boolean boolean0 = minutes2.isLessThan(minutes1);
      assertEquals(0, minutes2.getMinutes());
      assertFalse(boolean0);
      assertEquals((-817), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertFalse(boolean0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Duration duration1 = duration0.minus(86399999L);
      Minutes minutes0 = duration1.toStandardMinutes();
      Hours hours0 = duration1.toStandardHours();
      Minutes minutes1 = hours0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan(minutes1);
      assertFalse(boolean0);
      assertEquals((-7680), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan(minutes0);
      assertFalse(boolean0);
      assertEquals((-5760), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertEquals(0, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(0, weeks0.getWeeks());
      assertEquals((-5760), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardDays(44L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      assertEquals(63360, minutes0.getMinutes());
      assertEquals(6, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.millis(252L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      minutes0.toStandardSeconds();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1791L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals((-154742400), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-3410L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertEquals((-56), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1791L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      Hours hours1 = minutes0.toStandardHours();
      assertEquals((-42984), hours1.getHours());
      assertEquals((-2579040), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.millis(1L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Duration duration1 = minutes0.toStandardDuration();
      assertEquals(0L, duration1.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-4544L));
      Minutes minutes0 = duration0.toStandardMinutes();
      Duration duration1 = minutes0.toStandardDuration();
      assertEquals((-272640000L), duration1.getMillis());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1535));
      Days days0 = minutes0.toStandardDays();
      assertEquals((-1), days0.getDays());
      assertEquals((-1535), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(11);
      Minutes minutes1 = minutes0.negated();
      Minutes minutes2 = minutes1.plus(minutes0);
      assertEquals(0, minutes2.getMinutes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Duration duration0 = new Duration((-1075L));
      Minutes minutes0 = duration0.toStandardMinutes();
      minutes0.negated();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-1791L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      minutes0.negated();
      assertEquals((-2579040), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy(2);
      assertEquals((-5760), minutes0.getMinutes());
      assertEquals((-11520), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(60);
      Days days0 = minutes0.toStandardDays();
      Minutes minutes1 = days0.toStandardMinutes();
      Minutes minutes2 = minutes0.minus(minutes1);
      assertEquals(60, minutes2.getMinutes());
      assertSame(minutes2, minutes0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.standardDays(44L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Minutes minutes1 = minutes0.MAX_VALUE.minus(0);
      assertEquals(63360, minutes0.getMinutes());
      assertEquals(Integer.MAX_VALUE, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.millis(1L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.minus(331);
      assertEquals((-331), minutes1.getMinutes());
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      int int0 = minutes0.getMinutes();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.millis(2629800000L);
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      int int0 = minutes0.getMinutes();
      assertEquals(43200, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-3916));
      Minutes minutes1 = minutes0.MIN_VALUE.dividedBy((-3916));
      assertEquals(548387, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      Minutes minutes1 = minutes0.dividedBy(2);
      assertEquals((-5760), minutes0.getMinutes());
      assertEquals((-2880), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = new Duration((-1075L));
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = new Duration((-1075L));
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.THREE.plus(Integer.MAX_VALUE);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 3 + 2147483647
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.millis(1L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      Minutes minutes1 = minutes0.MIN_VALUE.plus(minutes0);
      // Undeclared exception!
      try { 
        minutes1.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.multipliedBy(1541);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 2147483647 * 1541
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes((-4544L));
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.MAX_VALUE.minus(minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 4544
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      // Undeclared exception!
      try { 
        minutes0.MIN_VALUE.minus(589);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -589
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-3410L));
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Minutes", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.parseMinutes("drqQ2'(ijKCc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"drqQ2'(ijKCc\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1625L);
      Duration duration1 = duration0.dividedBy(1625L);
      Minutes minutes0 = duration1.toStandardMinutes();
      Minutes minutes1 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan(minutes1);
      assertTrue(boolean0);
      assertEquals(97500, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Minutes minutes0 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertEquals((-6300), minutes0.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1645L);
      Minutes minutes0 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan((Minutes) null);
      assertEquals(98700, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Duration duration0 = Duration.standardHours(1625L);
      Minutes minutes0 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isLessThan(minutes0);
      assertFalse(boolean0);
      assertEquals(97500, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Duration duration0 = Duration.standardHours((-105L));
      Minutes minutes0 = duration0.toStandardMinutes();
      boolean boolean0 = minutes0.isGreaterThan((Minutes) null);
      assertFalse(boolean0);
      assertEquals((-6300), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      boolean boolean0 = minutes0.isGreaterThan(minutes0);
      assertEquals(0, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Minutes minutes1 = minutes0.ONE.dividedBy((-90));
      assertEquals(0, minutes1.getMinutes());
      assertEquals(3126, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Minutes minutes1 = minutes0.ONE.minus(minutes0);
      assertEquals(3126, minutes0.getMinutes());
      assertEquals((-3125), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2);
      Minutes minutes1 = minutes0.plus((Minutes) null);
      assertEquals(2, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(0);
      Minutes minutes1 = minutes0.ONE.plus(0);
      Minutes minutes2 = minutes0.plus(0);
      boolean boolean0 = minutes1.isGreaterThan(minutes2);
      assertEquals(0, minutes2.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Minutes minutes0 = Minutes.parseMinutes((String) null);
      Minutes minutes1 = minutes0.minus((Minutes) null);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Minutes minutes0 = Minutes.minutesIn((ReadableInterval) null);
      Minutes minutes1 = minutes0.dividedBy(1);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MAX_VALUE);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3);
      assertEquals(3, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Duration duration0 = minutes0.toStandardDuration();
      assertEquals(187560L, duration0.getStandardSeconds());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Minutes minutes1 = minutes0.multipliedBy(3126);
      assertEquals(3126, minutes0.getMinutes());
      assertEquals(9771876, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Seconds seconds0 = minutes0.toStandardSeconds();
      assertEquals(187560, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Minutes minutes1 = minutes0.minus(3126);
      assertEquals(0, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2);
      minutes0.getFieldType();
      assertEquals(2, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Hours hours0 = minutes0.MAX_VALUE.toStandardHours();
      assertEquals(3126, minutes0.getMinutes());
      assertEquals(35791394, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-3916));
      String string0 = minutes0.toString();
      assertEquals("PT-3916M", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Instant instant0 = Instant.ofEpochMilli((-3916));
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(Integer.MIN_VALUE);
      int int0 = minutes0.getMinutes();
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      minutes0.THREE.getPeriodType();
      assertEquals(3126, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Days days0 = minutes0.toStandardDays();
      assertEquals(3126, minutes0.getMinutes());
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1);
      Minutes minutes1 = minutes0.negated();
      assertEquals(1, minutes0.getMinutes());
      assertEquals((-1), minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(3126);
      Weeks weeks0 = minutes0.MIN_VALUE.toStandardWeeks();
      assertEquals(3126, minutes0.getMinutes());
      assertEquals((-213044), weeks0.getWeeks());
  }
}
