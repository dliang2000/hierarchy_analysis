/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 05:53:37 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.MockitoExtension.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeField;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.UTCDateTimeZone;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.field.OffsetDateTimeField;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DateMidnight_ESTest extends DateMidnight_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) copticChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths((-3781));
      assertEquals(10570435200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600000L);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks((-47));
      assertEquals((-28407600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gregorianChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-929));
      assertEquals((-27924048000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      Locale locale0 = new Locale("AH", "must be in the range [");
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("AH", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"AH\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(89L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      DateMidnight dateMidnight1 = dateMidnight_Property0.setCopy(292272992);
      assertEquals(9223182612259200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(60000L, (DateTimeZone) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      long long0 = dateMidnight_Property0.getMillis();
      assertEquals((-68400000L), long0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateTimeField dateTimeField0 = dateMidnight_Property0.getField();
      assertNotNull(dateTimeField0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600000L);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateTimeField dateTimeField0 = buddhistChronology0.weekyearOfCentury();
      OffsetDateTimeField offsetDateTimeField0 = new OffsetDateTimeField(dateTimeField0, 1);
      DateMidnight.Property dateMidnight_Property0 = new DateMidnight.Property(dateMidnight0, offsetDateTimeField0);
      assertEquals(18000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(uTCDateTimeZone0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = copticChronology0.getZone();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertSame(dateMidnight1, dateMidnight0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(3600000);
      assertEquals(113542863800400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(4);
      assertEquals(1076734800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withYear(2647);
      assertEquals(21367861200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(4563);
      assertEquals(81827384400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      PeriodType periodType0 = PeriodType.standard();
      Period period0 = new Period(dateMidnight0, dateMidnight1, periodType0);
      DateMidnight dateMidnight2 = dateMidnight0.withPeriodAdded(period0, 44);
      assertEquals((-2775619420948000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(2431L);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertEquals((-28926000000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(4);
      assertEquals(1397448000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1392422400000L);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(1);
      DateMidnight dateMidnight2 = dateMidnight1.withFields((ReadablePartial) null);
      assertEquals((-62131603348000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals((-68400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DurationFieldType durationFieldType0 = DurationFieldType.MILLIS_TYPE;
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, (-1338));
      assertEquals((-154800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(60000L, (DateTimeZone) null);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(543);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateMidnight dateMidnight2 = dateMidnight1.withField(dateTimeFieldType0, 9);
      assertSame(dateMidnight2, dateMidnight1);
      assertEquals((-45027859348000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withEra(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(543);
      DateMidnight dateMidnight2 = dateMidnight1.withEra(1);
      assertSame(dateMidnight2, dateMidnight1);
      assertEquals((-45027859348000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(1);
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfYear(1);
      assertSame(dateMidnight2, dateMidnight1);
      assertNotSame(dateMidnight2, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(10800000L, (Chronology) copticChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertEquals((-9676800000L), dateMidnight1.getMillis());
      assertEquals(0L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfWeek(4);
      assertEquals(1392267600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(543);
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfMonth(29);
      assertEquals(1440820800000L, dateMidnight2.getMillis());
      assertEquals(1439265600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(18000000L, interval0.getEndMillis());
      assertEquals((-68400000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      System.setCurrentTimeMillis((-965L));
      DateMidnight dateMidnight0 = new DateMidnight();
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(18000000L, interval0.getEndMillis());
      assertEquals((-68400000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(60000L, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(0);
      Interval interval0 = dateMidnight1.toInterval();
      assertEquals((-2177434800000L), interval0.getEndMillis());
      assertEquals((-2177521200000L), interval0.getStartMillis());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(242L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(0);
      assertEquals((-68400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(543);
      DateMidnight dateMidnight2 = dateMidnight1.plusWeeks(1);
      assertEquals((-45027340948000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-432L));
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths((-1869));
      assertEquals((-4915190548000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(0);
      assertEquals((-68400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1L);
      DateMidnight dateMidnight1 = dateMidnight0.plusDays((-45));
      assertEquals((-3956400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(60000L, (DateTimeZone) null);
      Period period0 = new Period(0L);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) period0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      Duration duration0 = Duration.standardDays(1);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      assertEquals(1392422400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      DateMidnight dateMidnight1 = dateMidnight0.plus((long) 0);
      assertEquals(18000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(0);
      DateMidnight dateMidnight2 = dateMidnight1.plus((long) 0);
      assertEquals((-61721548948000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      System.setCurrentTimeMillis((-3182L));
      DateMidnight dateMidnight0 = DateMidnight.now();
      assertEquals((-68400000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(1771);
      assertEquals((-54496176148000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(543);
      DateMidnight dateMidnight2 = dateMidnight1.minusWeeks(1);
      assertEquals((-45028550548000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(89L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusMonths(1302);
      DateMidnight dateMidnight2 = dateMidnight1.withDayOfWeek(1);
      assertNotSame(dateMidnight2, dateMidnight0);
      assertSame(dateMidnight2, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600000L);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(180);
      assertEquals((-15537600000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      Period period0 = Period.minutes((-187));
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) period0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      Period period0 = Period.weeks(1);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) period0);
      assertEquals(1391731200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(4);
      Duration duration0 = Duration.standardMinutes(0);
      DateMidnight dateMidnight2 = dateMidnight1.minus((ReadableDuration) duration0);
      assertEquals((-68400000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Duration duration0 = Duration.standardMinutes(0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minus(0L);
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600000L);
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 180);
      assertEquals(18000000L, dateMidnight0.getMillis());
      assertEquals((-68400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      GJChronology gJChronology0 = GJChronology.getInstance();
      long long0 = dateMidnight0.checkInstant(0L, gJChronology0);
      assertEquals((-68400000L), long0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      long long0 = dateMidnight0.checkInstant(1388534400000L, ethiopicChronology0);
      assertEquals(1388534400000L, long0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      long long0 = dateMidnight0.checkInstant((-1), islamicChronology0);
      assertEquals((-68400000L), long0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfEra((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for yearOfEra must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(islamicChronology0);
      // Undeclared exception!
      try { 
        dateMidnight1.withYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year must be in the range [1,292271022]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes((-1), (-1));
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekyear(1073741824);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1073741824 for weekyear must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withWeekOfWeekyear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for weekOfWeekyear must be in the range [1,52]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Period period0 = new Period((-579), (-3143), (-3143), (-2034458191), (-3143), (-545), 2596, 968);
      // Undeclared exception!
      try { 
        dateMidnight0.withPeriodAdded(period0, (-1213));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 2467797785683 * 86400000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withMonthOfYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.MONTHS_TYPE;
      // Undeclared exception!
      try { 
        dateMidnight1.withFieldAdded(durationFieldType0, (-2147483622));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.ERAS_TYPE;
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded(durationFieldType0, 4563);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      // Undeclared exception!
      try { 
        dateMidnight0.withField(dateTimeFieldType0, (-2859));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2859 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, copticChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(1);
      Duration duration0 = new Duration(dateMidnight1, dateMidnight0);
      // Undeclared exception!
      try { 
        dateMidnight1.withDurationAdded((ReadableDuration) duration0, (-2147483638));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: -31536000000 * -2147483638
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      // Undeclared exception!
      try { 
        dateMidnight0.withDurationAdded(1396051200000L, 2146628758);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows a long: 1396051200000 * 2146628758
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfYear((-2956));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2956 for dayOfYear must be in the range [1,365]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, uTCDateTimeZone0);
      // Undeclared exception!
      try { 
        dateMidnight0.withChronology(islamicChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.plusYears(1431655765);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 1431657779 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, (DateTimeParser) null);
      // Undeclared exception!
      try { 
        DateMidnight.parse("Oq=Fe04S1", dateTimeFormatter0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Parsing not supported
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn((-2147483646)).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("", dateTimeFormatter0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("", (DateTimeFormatter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      // Undeclared exception!
      try { 
        DateMidnight.parse("#A`glt4sq&SyOfS`!l", dateTimeFormatter0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"#A`glt4sq&SyOfS`!l\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.format.DateTimeFormatterBuilder$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.parse("org/joda/time/tz/data");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"org/joda/time/tz/data\"
         //
         verifyException("org.joda.time.format.DateTimeFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      // Undeclared exception!
      try { 
        dateMidnight0.minusYears(2147477764);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -2147475750 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) islamicChronology0);
      Duration duration0 = Duration.standardSeconds(145386230400000L);
      // Undeclared exception!
      try { 
        dateMidnight0.minus((ReadableDuration) duration0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-3L));
      // Undeclared exception!
      try { 
        dateMidnight0.checkInstant((-3L), (Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      DateMidnight dateMidnight1 = null;
      try {
        dateMidnight1 = new DateMidnight(fileSystemHandling0, gJChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.testdata.FileSystemHandling
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      MockThaiBuddhistDate mockThaiBuddhistDate0 = new MockThaiBuddhistDate();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight(mockThaiBuddhistDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: org.evosuite.runtime.mock.java.time.chrono.MockThaiBuddhistDate
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-2158), 10125000, (-2158), (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 10125000 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-940), (-940), 475, buddhistChronology0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -940 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1 for monthOfYear must be in the range [1,12]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) null);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded((ReadablePeriod) null, 0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Period period0 = Period.seconds(83);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, 44);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight((Object) null, ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) null, (-1931));
      assertEquals(1392336000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(0L, 2915);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withMillis(4);
      DateMidnight dateMidnight2 = dateMidnight1.withMillis(2);
      assertSame(dateMidnight2, dateMidnight1);
      assertEquals((-68400000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      // Undeclared exception!
      try { 
        dateMidnight0.property((DateTimeFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The DateTimeFieldType must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfMonth();
      dateMidnight0.property(dateTimeFieldType0);
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600000L);
      DateMidnight dateMidnight1 = dateMidnight0.minusDays(0);
      assertEquals(18000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minusDays((-2207));
      assertEquals(1583038800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(0);
      assertEquals((-68400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks((-2256));
      assertEquals(1364356800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600049L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears(0);
      assertEquals(18000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.minusYears((-1));
      assertEquals(31467600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(543);
      DateMidnight dateMidnight2 = dateMidnight1.withWeekyear(543);
      Duration duration0 = Duration.standardSeconds(365L);
      DateMidnight dateMidnight3 = dateMidnight2.plus((ReadableDuration) duration0);
      DateMidnight dateMidnight4 = dateMidnight3.withDayOfMonth(29);
      assertEquals((-45011011348000L), dateMidnight4.getMillis());
      assertSame(dateMidnight3, dateMidnight2);
      assertEquals((-45012393748000L), dateMidnight3.getMillis());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(0);
      assertEquals((-68400000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusWeeks(1);
      assertEquals(1392958800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(89L, (DateTimeZone) uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plusMonths(4);
      assertEquals(1402718400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Period period0 = Period.seconds(83);
      DateMidnight dateMidnight1 = dateMidnight0.withPeriodAdded(period0, 0);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = new UTCDateTimeZone();
      DateMidnight dateMidnight0 = new DateMidnight(89L, (DateTimeZone) uTCDateTimeZone0);
      Duration duration0 = Duration.standardMinutes(89L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded((ReadableDuration) duration0, 0);
      assertEquals(0L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(60000L, (DateTimeZone) null);
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) null);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(21600049L);
      DateMidnight dateMidnight1 = dateMidnight0.withDurationAdded(21600049L, 0);
      assertEquals(18000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DurationFieldType durationFieldType0 = DurationFieldType.HALFDAYS_TYPE;
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, 0);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withFieldAdded((DurationFieldType) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      // Undeclared exception!
      try { 
        dateMidnight0.withField((DateTimeFieldType) null, 3347);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Field must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfHour();
      DateMidnight dateMidnight1 = dateMidnight0.withField(dateTimeFieldType0, 9);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withFields((ReadablePartial) null);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) dateMidnight0);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withFields(localDate0);
      assertEquals(1391230800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gregorianChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withChronology(gregorianChronology0);
      assertEquals(1392336000000L, dateMidnight1.getMillis());
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((Chronology) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Chronology must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      // Undeclared exception!
      try { 
        DateMidnight.now((DateTimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Zone must not be null
         //
         verifyException("org.joda.time.DateMidnight", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.era();
      DateMidnight dateMidnight1 = dateMidnight_Property0.getDateMidnight();
      assertSame(dateMidnight0, dateMidnight1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMinimumValue();
      assertEquals((-62131776148000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfFloorCopy();
      assertEquals(1388552400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfCeilingCopy();
      assertEquals(1391230800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfCentury();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundCeilingCopy();
      assertEquals(1420088400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundFloorCopy();
      assertEquals((-241200000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy(0L);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.weekyear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.roundHalfEvenCopy();
      assertEquals(1388379600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.year();
      DateMidnight dateMidnight1 = dateMidnight_Property0.withMaximumValue();
      assertEquals(9223371989413200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      // Undeclared exception!
      try { 
        dateMidnight0.withYearOfCentury(167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 167 for yearOfCentury must be in the range [0,99]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      dateMidnight0.dayOfYear();
      assertEquals((-62135577748000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((Object) null);
      assertEquals(1392354000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.parse("3T");
      Period period0 = new Period(21, 21, 10125000, 116);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) period0);
      assertEquals((-62082787348000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadablePeriod) null);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1);
      dateMidnight0.weekOfWeekyear();
      assertEquals((-62135577748000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 1);
      assertEquals(1392267600000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(60000L, (DateTimeZone) null);
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      // Undeclared exception!
      try { 
        dateMidnight_Property0.setCopy("f,}\"aT7CQ~vv|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value \"f,}\"aT7CQ~vv|\" for dayOfWeek is not supported
         //
         verifyException("org.joda.time.chrono.GJLocaleSymbols", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      dateMidnight0.centuryOfEra();
      assertEquals(1392354000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) gregorianChronology0);
      dateMidnight0.toLocalDate();
      assertEquals(1392336000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.plus((long) 0);
      assertEquals(1392354000000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.yearOfEra();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addToCopy(0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withDayOfYear(1);
      assertEquals(1388534400000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, uTCDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withMonthOfYear(1);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = dateMidnight0.withYear(0);
      assertEquals((-62135664148000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      Interval interval0 = dateMidnight0.toInterval();
      assertEquals(1392354000000L, interval0.getStartMillis());
      assertEquals(1392440400000L, interval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.parse("3T");
      // Undeclared exception!
      try { 
        dateMidnight0.withEra((-1291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -1291 for era must be in the range [0,1]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.monthOfYear();
      DateMidnight dateMidnight1 = dateMidnight_Property0.addWrapFieldToCopy(0);
      assertSame(dateMidnight1, dateMidnight0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      assertEquals(1388707200000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      UTCDateTimeZone uTCDateTimeZone0 = (UTCDateTimeZone)UTCDateTimeZone.INSTANCE;
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, uTCDateTimeZone0);
      Duration duration0 = Duration.standardSeconds(145386230400000L);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadableDuration) duration0);
      assertEquals((-145448365996800000L), dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight.Property dateMidnight_Property0 = dateMidnight0.dayOfWeek();
      dateMidnight_Property0.getChronology();
      assertEquals(1392354000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfWeek(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for dayOfWeek must be in the range [1,7]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(1, 1, 1, (Chronology) null);
      assertEquals((-62135577748000L), dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        dateMidnight0.withDayOfMonth(29);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 29 for dayOfMonth must be in the range [1,28]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      dateMidnight0.dayOfMonth();
      assertEquals(1392354000000L, dateMidnight0.getMillis());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(1);
      DateMidnight dateMidnight2 = dateMidnight1.withDurationAdded((long) 0, 1);
      assertEquals((-62131603348000L), dateMidnight2.getMillis());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.parse("3T");
      DateMidnight dateMidnight1 = dateMidnight0.withCenturyOfEra(21);
      assertEquals(4197070800000L, dateMidnight1.getMillis());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Integer integer0 = new Integer(1073741824);
      DateMidnight dateMidnight0 = null;
      try {
        dateMidnight0 = new DateMidnight((Object) integer0, (DateTimeZone) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No instant converter found for type: java.lang.Integer
         //
         verifyException("org.joda.time.convert.ConverterManager", e);
      }
  }
}
