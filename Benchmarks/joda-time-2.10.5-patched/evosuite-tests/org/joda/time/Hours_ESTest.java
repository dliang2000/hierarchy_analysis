/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 15 06:57:48 GMT 2020
 */

package org.joda.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Minutes;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Hours_ESTest extends Hours_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.ONE.minus(1963);
      Hours hours2 = Hours.hoursIn((ReadableInterval) null);
      boolean boolean0 = hours2.isLessThan(hours1);
      assertFalse(boolean0);
      assertSame(hours2, hours0);
      assertEquals((-1962), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Hours hours1 = hours0.SEVEN.dividedBy(4);
      boolean boolean0 = hours1.isLessThan((Hours) null);
      assertEquals(1, hours1.getHours());
      assertFalse(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-5L));
      Duration duration1 = duration0.multipliedBy((-2997L));
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = duration1.toStandardMinutes();
      Hours hours1 = minutes0.toStandardHours();
      boolean boolean0 = hours0.isGreaterThan(hours1);
      assertEquals(359640, hours1.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2432L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(2432, hours0.getHours());
      assertEquals(14, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Weeks weeks0 = hours0.MIN_VALUE.toStandardWeeks();
      assertEquals((-12782640), weeks0.getWeeks());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2432L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Seconds seconds1 = hours0.toStandardSeconds();
      assertEquals(8755200, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Duration duration0 = Duration.standardDays((-5L));
      Hours hours0 = duration0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      assertEquals((-432000), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.millis(3600000L);
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(60, minutes0.getMinutes());
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Duration duration0 = new Duration(21600000L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.multipliedBy((-346));
      Minutes minutes0 = hours1.toStandardMinutes();
      assertEquals((-124560), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.hours(4);
      Duration duration0 = hours0.MIN_VALUE.toStandardDuration();
      assertEquals(4, hours0.getHours());
      assertEquals((-89478485L), duration0.getStandardDays());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = Duration.standardHours(2432L);
      Seconds seconds0 = duration0.toStandardSeconds();
      Hours hours0 = seconds0.toStandardHours();
      Days days0 = hours0.toStandardDays();
      assertEquals(101, days0.getDays());
      assertEquals(2432, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.hours(986);
      Days days0 = hours0.MIN_VALUE.toStandardDays();
      assertEquals((-89478485), days0.getDays());
      assertEquals(986, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Duration duration0 = new Duration(21600000L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.multipliedBy((-346));
      Hours hours2 = hours1.plus(hours0);
      assertEquals((-2070), hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.SIX.plus((-6));
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Duration duration0 = Duration.millis(3600000L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Days days0 = minutes0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = hours0.plus((-228));
      assertEquals((-228), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Hours hours0 = duration0.toStandardHours();
      hours0.negated();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.hours((-10));
      hours0.negated();
      assertEquals((-10), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(604800L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.ONE.multipliedBy(20);
      assertEquals(20, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(1920L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.minus(117);
      Hours hours2 = hours0.minus(hours1);
      assertEquals((-117), hours1.getHours());
      assertEquals(117, hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Duration duration0 = new Duration(21600000L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.multipliedBy((-346));
      Hours hours2 = hours1.minus(hours0);
      assertEquals((-2082), hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.SEVEN.minus(4);
      Hours hours2 = hours1.plus(hours0);
      assertEquals(3, hours2.getHours());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2851L);
      Duration duration1 = duration0.withDurationAdded(2851L, 623191204);
      Hours hours0 = duration1.toStandardHours();
      int int0 = hours0.getHours();
      assertEquals(493533, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Duration duration0 = new Duration(21600000L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.multipliedBy((-346));
      int int0 = hours1.getHours();
      assertEquals((-2076), int0);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Minutes minutes0 = duration0.toStandardMinutes();
      Hours hours0 = minutes0.toStandardHours();
      Hours hours1 = hours0.dividedBy(304);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.hours((-346));
      Hours hours1 = hours0.dividedBy(264);
      assertEquals((-1), hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Duration duration0 = Duration.standardHours(0L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.toStandardSeconds();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 3600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds((-100L));
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.toStandardMinutes();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: -2147483648 * 60
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3600L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = Hours.standardHoursIn(hours0);
      assertTrue(hours1.equals((Object)hours0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Minutes minutes0 = duration0.toStandardMinutes();
      Seconds seconds0 = minutes0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.plus(326565);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 326565
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.negated();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Integer.MIN_VALUE cannot be negated
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(2851L);
      Duration duration1 = duration0.withDurationAdded(2851L, 623191204);
      Hours hours0 = duration1.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.multipliedBy(493533);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Multiplication overflows an int: 493533 * 493533
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Duration duration0 = Duration.standardHours(60000L);
      Hours hours0 = duration0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.MIN_VALUE.minus(hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: -2147483648 + -60000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      // Undeclared exception!
      try { 
        hours0.MAX_VALUE.minus((-264));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // The calculation caused an overflow: 2147483647 + 264
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Instant instant0 = new Instant(21600000L);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Duration duration0 = Duration.millis((-100L));
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      Hours hours0 = weeks0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.TWO.dividedBy(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.Hours", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Duration duration0 = new Duration((-140L));
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.ONE.plus(0);
      assertEquals(0, hours0.getHours());
      assertEquals(1, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.hours(1);
      assertEquals(1, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.hours((-10));
      hours0.getFieldType();
      assertEquals((-10), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      Hours hours1 = hours0.minus(0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Hours hours1 = hours0.SIX.dividedBy(1);
      boolean boolean0 = hours0.isLessThan(hours1);
      assertTrue(boolean0);
      assertEquals(6, hours1.getHours());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      boolean boolean0 = hours0.isLessThan((Hours) null);
      assertFalse(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Hours hours0 = duration0.toStandardHours();
      boolean boolean0 = hours0.isLessThan(hours0);
      assertFalse(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Duration duration0 = Duration.standardHours(3600L);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.minus(hours0);
      boolean boolean0 = hours0.isGreaterThan(hours1);
      assertEquals(3600, hours0.getHours());
      assertTrue(boolean0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      boolean boolean0 = hours0.isGreaterThan((Hours) null);
      assertEquals(0, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hours hours0 = Hours.hours(986);
      boolean boolean0 = hours0.isGreaterThan(hours0);
      assertEquals(986, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Hours hours1 = hours0.SIX.dividedBy(1);
      boolean boolean0 = hours1.isGreaterThan((Hours) null);
      assertEquals(6, hours1.getHours());
      assertTrue(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Hours hours1 = hours0.minus((Hours) null);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Hours hours1 = hours0.plus((Hours) null);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      Hours hours1 = hours0.SIX.plus(3);
      assertEquals(3, hours0.getHours());
      assertEquals(9, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.parseHours("XVd\r$U{A^u3N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid format: \"XVd\r$U{A^u3N\"
         //
         verifyException("org.joda.time.format.PeriodFormatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.hours(8);
      assertEquals(8, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.hours(7);
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.hours(6);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.hours(5);
      assertEquals(5, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Hours hours0 = Hours.hours(2);
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.hours(Integer.MIN_VALUE);
      assertEquals(Integer.MIN_VALUE, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      Minutes minutes0 = hours0.toStandardMinutes();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Instant instant0 = new Instant(21600000L);
      Duration duration0 = new Duration(instant0, instant0);
      Hours hours0 = duration0.toStandardHours();
      int int0 = hours0.getHours();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Instant instant0 = new Instant(21600000L);
      Duration duration0 = new Duration(instant0, instant0);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.FIVE.negated();
      assertEquals((-5), hours1.getHours());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Instant instant0 = new Instant(21600000L);
      Duration duration0 = new Duration(instant0, instant0);
      Hours hours0 = duration0.toStandardHours();
      Weeks weeks0 = hours0.toStandardWeeks();
      assertEquals(0, hours0.getHours());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Hours hours0 = Hours.hours(3);
      hours0.TWO.getPeriodType();
      assertEquals(3, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Hours hours0 = Hours.hours(4);
      Days days0 = hours0.toStandardDays();
      assertEquals(0, days0.getDays());
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Instant instant0 = new Instant(21600000L);
      Duration duration0 = new Duration(instant0, instant0);
      Hours hours0 = duration0.toStandardHours();
      Hours hours1 = hours0.multipliedBy((-346));
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      Duration duration0 = hours0.MAX_VALUE.toStandardDuration();
      Hours hours1 = duration0.toStandardHours();
      assertEquals(0, hours0.getHours());
      assertEquals(128849018820L, duration0.getStandardMinutes());
      assertEquals(Integer.MAX_VALUE, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Instant instant0 = new Instant(21600000L);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Hours hours0 = Hours.hours(4);
      String string0 = hours0.toString();
      assertEquals("PT4H", string0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Hours hours0 = duration0.toStandardHours();
      hours0.toStandardSeconds();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      Duration duration0 = hours0.toStandardDuration();
      assertEquals(0L, duration0.getStandardHours());
  }
}
